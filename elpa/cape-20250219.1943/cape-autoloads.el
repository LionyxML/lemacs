;;; cape-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from cape.el

(autoload 'cape-history "cape" "\
Complete from Eshell, Comint or minibuffer history.
See also `consult-history' for a more flexible variant based on
`completing-read'.  If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-file "cape" "\
Complete file name at point.
See the user option `cape-file-directory-must-exist'.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-elisp-symbol "cape" "\
Complete Elisp symbol at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-elisp-block "cape" "\
Complete Elisp in Org or Markdown code block.
This Capf is particularly useful for literate Emacs configurations.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dabbrev "cape" "\
Complete with Dabbrev at point.

If INTERACTIVE is nil the function acts like a Capf.  In case you
observe a performance issue with auto-completion and `cape-dabbrev'
it is strongly recommended to disable scanning in other buffers.
See the user options `cape-dabbrev-min-length' and
`cape-dabbrev-check-other-buffers'.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dict "cape" "\
Complete word from dictionary at point.
This completion function works best if the dictionary is sorted
by frequency.  See the custom option `cape-dict-file'.  If
INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-abbrev "cape" "\
Complete abbreviation at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-line "cape" "\
Complete current line from other lines.
The buffers returned by `cape-line-buffer-function' are scanned for lines.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-company-to-capf "cape" "\
Convert Company BACKEND function to Capf.
VALID is a function taking the old and new input string.  It should
return nil if the cached candidates became invalid.  The default value
for VALID is `string-prefix-p' such that the candidates are only fetched
again if the input prefix changed.

(fn BACKEND &optional VALID)")
(autoload 'cape-interactive "cape" "\
Complete interactively with the given CAPFS.

(fn &rest CAPFS)")
(autoload 'cape-capf-interactive "cape" "\
Create interactive completion function from CAPF.

(fn CAPF)")
(autoload 'cape-wrap-super "cape" "\
Call CAPFS and return merged completion result.
The CAPFS list can contain the keyword `:with' to mark the Capfs
afterwards as auxiliary One of the non-auxiliary Capfs before
`:with' must return non-nil for the super Capf to set in and
return a non-nil result.  Such behavior is useful when listing
multiple super Capfs in the `completion-at-point-functions':

  (setq completion-at-point-functions
        (list (cape-capf-super \\='eglot-completion-at-point
                               :with \\='tempel-complete)
              (cape-capf-super \\='cape-dabbrev
                               :with \\='tempel-complete)))

(fn &rest CAPFS)")
(autoload 'cape-wrap-debug "cape" "\
Call CAPF and return a completion table which prints trace messages.
If CAPF is an anonymous lambda, pass the Capf NAME explicitly for
meaningful debugging output.

(fn CAPF &optional NAME)")
(autoload 'cape-wrap-buster "cape" "\
Call CAPF and return a completion table with cache busting.
This function can be used as an advice around an existing Capf.
The cache is busted when the input changes.  The argument VALID
can be a function taking the old and new input string.  It should
return nil if the new input requires that the completion table is
refreshed.  The default value for VALID is `equal', such that the
completion table is refreshed on every input change.

(fn CAPF &optional VALID)")
(autoload 'cape-wrap-passthrough "cape" "\
Call CAPF and make sure that no completion style filtering takes place.

(fn CAPF)")
(autoload 'cape-wrap-properties "cape" "\
Call CAPF and strip or add completion PROPERTIES.
Completion properties include for example :exclusive, :category,
:annotation-function, :display-sort-function and various :company-*
extensions.  The :strip flag means to strip all completion properties.

(fn CAPF &rest PROPERTIES)")
(autoload 'cape-wrap-nonexclusive "cape" "\
Call CAPF and ensure that it is marked as non-exclusive.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-sort "cape" "\
Call CAPF and add SORT function.
This function can be used as an advice around an existing Capf.

(fn CAPF SORT)")
(autoload 'cape-wrap-predicate "cape" "\
Call CAPF and add an additional candidate PREDICATE.
The PREDICATE is passed the candidate symbol or string.

(fn CAPF PREDICATE)")
(autoload 'cape-wrap-silent "cape" "\
Call CAPF and silence it (no messages, no errors).
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-case-fold "cape" "\
Call CAPF and return a case-insensitive completion table.
If NOFOLD is non-nil return a case sensitive table instead.  This
function can be used as an advice around an existing Capf.

(fn CAPF &optional NOFOLD)")
(autoload 'cape-wrap-noninterruptible "cape" "\
Call CAPF and return a non-interruptible completion table.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-prefix-length "cape" "\
Call CAPF and ensure that prefix length is greater or equal than LENGTH.
If the prefix is long enough, enforce auto completion.

(fn CAPF LENGTH)")
(autoload 'cape-wrap-inside-faces "cape" "\
Call CAPF only if inside FACES.
This function can be used as an advice around an existing Capf.

(fn CAPF &rest FACES)")
(autoload 'cape-wrap-inside-code "cape" "\
Call CAPF only if inside code, not inside a comment or string.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-inside-comment "cape" "\
Call CAPF only if inside comment.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-inside-string "cape" "\
Call CAPF only if inside string.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-purify "cape" "\
Call CAPF and ensure that it does not illegally modify the buffer.
This function can be used as an advice around an existing
Capf.  It has been introduced mainly to fix the broken
`pcomplete-completions-at-point' function in Emacs versions < 29.

(fn CAPF)")
(autoload 'cape-wrap-accept-all "cape" "\
Call CAPF and return a completion table which accepts every input.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
 (autoload 'cape-capf-accept-all "cape")
 (autoload 'cape-capf-buster "cape")
 (autoload 'cape-capf-case-fold "cape")
 (autoload 'cape-capf-debug "cape")
 (autoload 'cape-capf-inside-code "cape")
 (autoload 'cape-capf-inside-comment "cape")
 (autoload 'cape-capf-inside-faces "cape")
 (autoload 'cape-capf-inside-string "cape")
 (autoload 'cape-capf-nonexclusive "cape")
 (autoload 'cape-capf-noninterruptible "cape")
 (autoload 'cape-capf-passthrough "cape")
 (autoload 'cape-capf-predicate "cape")
 (autoload 'cape-capf-prefix-length "cape")
 (autoload 'cape-capf-properties "cape")
 (autoload 'cape-capf-purify "cape")
 (autoload 'cape-capf-silent "cape")
 (autoload 'cape-capf-super "cape")
 (autoload 'cape-prefix-map "cape" nil t 'keymap)
(register-definition-prefixes "cape" '("cape-"))


;;; Generated autoloads from cape-char.el

 (autoload 'cape-tex "cape-char" nil t)
 (autoload 'cape-sgml "cape-char" nil t)
 (autoload 'cape-rfc1345 "cape-char" nil t)
 (when (> emacs-major-version 28) (autoload 'cape-emoji "cape-char" nil t))
(register-definition-prefixes "cape-char" '("cape-char--"))


;;; Generated autoloads from cape-keyword.el

(autoload 'cape-keyword "cape-keyword" "\
Complete programming language keyword at point.
See the variable `cape-keyword-list'.
If INTERACTIVE is nil the function acts like a capf.

(fn &optional INTERACTIVE)" t)
(register-definition-prefixes "cape-keyword" '("cape-"))

;;; End of scraped data

(provide 'cape-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; cape-autoloads.el ends here
