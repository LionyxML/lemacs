;;; ready-player-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from ready-player.el

(defvar ready-player-mode nil "\
Non-nil if Ready-Player mode is enabled.
See the `ready-player-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ready-player-mode'.")
(custom-autoload 'ready-player-mode "ready-player" nil)
(autoload 'ready-player-mode "ready-player" "\
Toggle Ready Player mode media file recognition.

See variable `ready-player-supported-media' for recognized types.

This is a global minor mode.  If called interactively, toggle the
`Ready-Player mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='ready-player-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'ready-player-add-to-auto-mode-alist "ready-player" "\
Add media recognized by `ready-player-mode'.")
(autoload 'ready-player-version "ready-player" "\
Show Ready Player Mode version." t)
(autoload 'ready-player-view-player "ready-player" "\
Toggle switching between player buffer and previous buffer.

If on player buffer already, switch to previous buffer.

If there's no existing `ready-player' buffer, attempt to load the last
known directory." t)
(autoload 'ready-player-show-info "ready-player" "\
Show playback info in the echo area." t)
(autoload 'ready-player-next-button "ready-player" "\
Navigate to next button." t)
(autoload 'ready-player-previous-button "ready-player" "\
Navigate to previous button." t)
(autoload 'ready-player-quit "ready-player" "\
Quit `ready-player-major-mode' window and kill buffer." t)
(autoload 'ready-player-open-externally "ready-player" "\
Open visited file in default external program.
When in `dired' mode, open file under the cursor.

With a prefix ARG always prompt for command to use.

(fn ARG)" t)
(autoload 'ready-player-previous "ready-player" "\
Open the previous media file in the same directory.

With optional argument N, visit the Nth file before the current one.

(fn &optional N)" '(ready-player))
(autoload 'ready-player-next "ready-player" "\
Open the next media file in the same directory.

With optional argument N, visit the Nth file after the current one.

(fn &optional N)" '(ready-player))
(autoload 'ready-player-reindex-session "ready-player" "\
Re-index current ready player session." t)
(autoload 'ready-player-mark-dired-file "ready-player" "\
Mark the current file in the appropriate `dired' buffer(s)." '(ready-player-major-mode))
(autoload 'ready-player-unmark-dired-file "ready-player" "\
Unmark the current file in the appropriate `dired' buffer(s)." '(ready-player-major-mode))
(autoload 'ready-player-stop "ready-player" "\
Stop media playback." t)
(autoload 'ready-player-play "ready-player" "\
Start media playback." t)
(autoload 'ready-player-toggle-play-stop "ready-player" "\
Toggle play/stop of media." t)
(autoload 'ready-player-open-my-media-collection "ready-player" "\
Open my media collection from `ready-player-my-media-collection-location'." t)
(autoload 'ready-player-load-last-known "ready-player" "\
Attempt to load last known media." t)
(autoload 'ready-player-seek-forward "ready-player" "\
Seek forward.

With prefix, seek in multiples of 60 seconds.

With numeric prefix, seek value in SECONDS.

Note: mpv player only at this time.

Get in touch if keen to add for other players.

(fn SECONDS)" t)
(autoload 'ready-player-seek-backward "ready-player" "\
Seek backward.

With prefix, seek in multiples of 60 seconds.

With numeric prefix, seek value in SECONDS.

Note: mpv player only at this time.

Get in touch if keen to add for other players.

(fn SECONDS)" t)
(autoload 'ready-player-toggle-modeline "ready-player" "\
Toggle displaying the mode line." t)
(autoload 'ready-player-toggle-repeat "ready-player" "\
Cycle through repeat settings: file, directory, off." t)
(autoload 'ready-player-toggle-shuffle "ready-player" "\
Toggle shuffle setting." t)
(autoload 'ready-player-toggle-autoplay "ready-player" "\
Toggle autoplay setting." t)
(autoload 'ready-player-reload-buffer "ready-player" "\
Reload media from file." t)
(autoload 'ready-player-view-dired-playback-buffer "ready-player" "\
View associated `dired' playback buffer." t)
(autoload 'ready-player-lookup-song "ready-player" "\
Look up current song on Discogs." t)
(autoload 'ready-player-set-album-artwork "ready-player" "\
Select image and set as album artwork." t)
(autoload 'ready-player-download-album-artwork-and-set-metadata "ready-player" "\
Download album artwork set media metadata.

Note: Can be invoked from either `dired' or `ready-player-major-mode' buffers." t)
(autoload 'ready-player-download-album-artwork "ready-player" "\
Download album artwork to media directory.

With PREFIX, ask user to provide artist and album.

Note: Can be invoked from either `dired' or `ready-player-major-mode' buffers.

(fn PREFIX)" t)
(autoload 'ready-player-load-m3u-playlist "ready-player" "\
Load an .m3u playlist.

Optionally set M3U-PATH to override query.

When invoked programmatically, return the `dired' buffer without
loading into `ready-player'.

(fn &optional M3U-PATH)" t)
(autoload 'ready-player-load-dired-buffer "ready-player" "\
Load a `dired' buffer.

If DIRED-BUFFER is nil, offer to pick one.

`dired' buffers typically show a directory's content, but they can
also show the output of a shell command.  For example, `find-dired'.

`ready-player-load-dired-buffer' can open any `dired' buffer for
playback.

If MEDIA-FILE is non-nil, attempt to load it.

(fn &optional DIRED-BUFFER MEDIA-FILE)" t)
(autoload 'ready-player-load-directory "ready-player" "\
Load all media from directory (experimental).

If point is on a directory in a `dired' mode, offer to load it.
Otherwise browse to select a different directory to load.

If invoked programmatically, set DIRECTORY.

If MEDIA-FILE is non-nil, attempt to load it.

(fn &optional DIRECTORY MEDIA-FILE)" t)
(autoload 'ready-player-search "ready-player" "\
Search the `dired' playlist for playback (experimental).

Index: Fully indexed metadata.
Source: File list fed to the metadata indexer" t)
(autoload 'ready-player-search-bookmarks "ready-player" "\
Search the bookmarked files." t)
(autoload 'ready-player-toggle-bookmark "ready-player" "\
Toggle currently played file bookmark." t)
(register-definition-prefixes "ready-player" '("display-image-in-temp-buffer" "ready-player"))

;;; End of scraped data

(provide 'ready-player-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; ready-player-autoloads.el ends here
