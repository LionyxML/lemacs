;;; ellama-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from ellama.el

(autoload 'ellama-load-session "ellama" "\
Load ellama session from file." t)
(autoload 'ellama-session-delete "ellama" "\
Delete ellama session." t)
(autoload 'ellama-session-switch "ellama" "\
Change current active session." t)
(autoload 'ellama-session-kill "ellama" "\
Select and kill one of active sessions." t)
(autoload 'ellama-session-rename "ellama" "\
Rename current ellama session." t)
(autoload 'ellama-context-reset "ellama" "\
Clear global context." t)
(autoload 'ellama-context-element-remove-by-name "ellama" "\
Remove a context element by its name from the global context.
This function prompts the user to select a context element from
the list of unique elements currently present in the global
context and removes it.  After removal, it updates the display of
the context." t)
(autoload 'ellama-context-header-line-mode "ellama" "\
Toggle Ellama Context header line mode.

This is a minor mode.  If called interactively, toggle the
`Ellama-Context-Header-Line mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `ellama-context-header-line-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'ellama-context-header-line-global-mode 'globalized-minor-mode t)
(defvar ellama-context-header-line-global-mode nil "\
Non-nil if Ellama-Context-Header-Line-Global mode is enabled.
See the `ellama-context-header-line-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ellama-context-header-line-global-mode'.")
(custom-autoload 'ellama-context-header-line-global-mode "ellama" nil)
(autoload 'ellama-context-header-line-global-mode "ellama" "\
Toggle Ellama-Context-Header-Line mode in all buffers.
With prefix ARG, enable Ellama-Context-Header-Line-Global mode if ARG
is positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Ellama-Context-Header-Line mode is enabled in all buffers where
`ellama-context-header-line-mode' would do it.

See `ellama-context-header-line-mode' for more information on
Ellama-Context-Header-Line mode.

(fn &optional ARG)" t)
(autoload 'ellama-context-mode-line-mode "ellama" "\
Toggle Ellama Context mode line mode.

This is a minor mode.  If called interactively, toggle the
`Ellama-Context-Mode-Line mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `ellama-context-mode-line-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'ellama-context-mode-line-global-mode 'globalized-minor-mode t)
(defvar ellama-context-mode-line-global-mode nil "\
Non-nil if Ellama-Context-Mode-Line-Global mode is enabled.
See the `ellama-context-mode-line-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ellama-context-mode-line-global-mode'.")
(custom-autoload 'ellama-context-mode-line-global-mode "ellama" nil)
(autoload 'ellama-context-mode-line-global-mode "ellama" "\
Toggle Ellama-Context-Mode-Line mode in all buffers.
With prefix ARG, enable Ellama-Context-Mode-Line-Global mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Ellama-Context-Mode-Line mode is enabled in all buffers where
`ellama-context-mode-line-mode' would do it.

See `ellama-context-mode-line-mode' for more information on
Ellama-Context-Mode-Line mode.

(fn &optional ARG)" t)
(autoload 'ellama-send-buffer-to-new-chat "ellama" "\
Send current buffer to new chat session." t)
(autoload 'ellama-blueprint-mode "ellama" "\
Toggle Ellama Blueprint mode.

(fn)" t)
(autoload 'ellama-manage-context "ellama" "\
Manage the global context." t)
(autoload 'ellama-preview-context-element-at-point "ellama" "\
Preview ellama context element at point." t)
(autoload 'ellama-remove-context-element-at-point "ellama" "\
Remove ellama context element at point from global context." t)
(autoload 'ellama-context-add-file "ellama" "\
Add file to context." t)
(autoload 'ellama-context-add-file-quote "ellama" "\
Add file quote to context interactively." t)
(autoload 'ellama-context-add-buffer "ellama" "\
Add BUF to context.

(fn BUF)" t)
(autoload 'ellama-context-add-directory "ellama" "\
Add all files in DIR to the context.

(fn DIR)" t)
(autoload 'ellama-context-add-selection "ellama" "\
Add active region to context." t)
(autoload 'ellama-context-add-info-node "ellama" "\
Add info NODE to context.

(fn NODE)" t)
(autoload 'ellama-context-add-info-node-quote "ellama" "\
Add info node quote to context interactively." t)
(autoload 'ellama-context-add-webpage-quote-eww "ellama" "\
Add webpage quote to context interactively from `eww'." t)
(autoload 'ellama-solve-reasoning-problem "ellama" "\
Solve reasoning PROBLEM with absctraction of thought.
Problem will be solved with the chain of questions to LLM.

(fn PROBLEM)" t)
(autoload 'ellama-solve-domain-specific-problem "ellama" "\
Solve domain-specific PROBLEM with `ellama-chain'.

(fn PROBLEM)" t)
(autoload 'ellama-chat "ellama" "\
Send PROMPT to ellama chat with conversation history.

If CREATE-SESSION set, creates new session even if there is an active session.
ARGS contains keys for fine control.

:provider PROVIDER -- PROVIDER is an llm provider for generation.

:session SESSION -- SESSION is a ellama conversation session.

:session-id ID -- ID is a ellama session unique identifier.

:system STR -- send STR to model as system message.

:on-done ON-DONE -- ON-DONE a function that's called with
the full response text when the request completes (with BUFFER current).

(fn PROMPT &optional CREATE-SESSION &rest ARGS)" t)
(autoload 'ellama-chat-send-last-message "ellama" "\
Send last user message extracted from current ellama chat buffer." t)
(autoload 'ellama-ask-about "ellama" "\
Ask ellama about selected region or current buffer." t)
(autoload 'ellama-ask-selection "ellama" "\
Send selected region or current buffer to ellama chat." t)
(autoload 'ellama-complete "ellama" "\
Complete text in current buffer." t)
(autoload 'ellama-generate-commit-message "ellama" "\
Generate commit message based on diff." t)
(autoload 'ellama-ask-line "ellama" "\
Send current line to ellama chat." t)
(autoload 'ellama-translate "ellama" "\
Ask ellama to translate selected region or word at point." t)
(autoload 'ellama-translate-buffer "ellama" "\
Ask ellama to translate current buffer." t)
(autoload 'ellama-define-word "ellama" "\
Find definition of current word." t)
(autoload 'ellama-summarize "ellama" "\
Summarize selected region or current buffer." t)
(autoload 'ellama-summarize-killring "ellama" "\
Summarize text from the kill ring." t)
(autoload 'ellama-code-review "ellama" "\
Review code in selected region or current buffer." t)
(autoload 'ellama-write "ellama" "\
Write text based on context and INSTRUCTION at point.

(fn INSTRUCTION)" t)
(autoload 'ellama-change "ellama" "\
Change selected text or text in current buffer according to provided CHANGE.
When the value of EDIT-TEMPLATE is 4, or with one `universal-argument' as
prefix (\\[universal-argument]), prompt the user to amend the template.

(fn CHANGE &optional EDIT-TEMPLATE)" t)
(autoload 'ellama-improve-grammar "ellama" "\
Enhance the grammar and spelling in the currently selected region or buffer.
When the value of EDIT-TEMPLATE is 4, or with one `universal-argument' as
prefix (\\[universal-argument]), prompt the user to amend the template.

(fn &optional EDIT-TEMPLATE)" t)
(autoload 'ellama-improve-wording "ellama" "\
Enhance the wording in the currently selected region or buffer.
When the value of EDIT-TEMPLATE is 4, or with one `universal-argument' as
prefix (\\[universal-argument]), prompt the user to amend the template.

(fn &optional EDIT-TEMPLATE)" t)
(autoload 'ellama-proofread "ellama" "\
Proofread the currently selected region or buffer.
When the value of EDIT-TEMPLATE is 4, or with one `universal-argument' as
prefix (\\[universal-argument]), prompt the user to amend the template.

(fn &optional EDIT-TEMPLATE)" t)
(autoload 'ellama-improve-conciseness "ellama" "\
Make the text of the currently selected region or buffer concise and simple.
When the value of EDIT-TEMPLATE is 4, or with one `universal-argument' as
prefix (\\[universal-argument]), prompt the user to amend the template.

(fn &optional EDIT-TEMPLATE)" t)
(autoload 'ellama-code-edit "ellama" "\
Change selected code or code in current buffer according to provided CHANGE.

(fn CHANGE)" t)
(autoload 'ellama-code-improve "ellama" "\
Change selected code or code in current buffer according to provided CHANGE." t)
(autoload 'ellama-code-complete "ellama" "\
Complete selected code or code in current buffer." t)
(autoload 'ellama-code-add "ellama" "\
Generate and insert new code based on DESCRIPTION.
This function prompts the user to describe the code they want to generate.
If a region is active, it includes the selected text as context for code
generation.

(fn DESCRIPTION)" t)
(autoload 'ellama-make-format "ellama" "\
Render selected text or text in current buffer as NEEDED-FORMAT.

(fn NEEDED-FORMAT)" t)
(autoload 'ellama-make-list "ellama" "\
Create markdown list from active region or current buffer." t)
(autoload 'ellama-make-table "ellama" "\
Create markdown table from active region or current buffer." t)
(autoload 'ellama-provider-select "ellama" "\
Select ellama provider." t)
(autoload 'ellama-chat-translation-enable "ellama" "\
Enable chat translation." t)
(autoload 'ellama-chat-translation-disable "ellama" "\
Enable chat translation." t)
(register-definition-prefixes "ellama" '("ellama-"))


;;; Generated autoloads from ellama-community-prompts.el

(autoload 'ellama-community-prompts-select-blueprint "ellama-community-prompts" "\
Select a prompt from the community prompt collection.
The user is prompted to choose a role, and then a
corresponding prompt is inserted into a blueprint buffer.

Optional argument FOR-DEVS filters prompts for developers.

(fn &optional FOR-DEVS)" t)
(autoload 'ellama-community-prompts-update-variables "ellama-community-prompts" "\
Prompt user for values of variables found in current buffer and update them." t)
(register-definition-prefixes "ellama-community-prompts" '("ellama-community-prompts-"))

;;; End of scraped data

(provide 'ellama-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; ellama-autoloads.el ends here
