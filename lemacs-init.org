#+TITLE: LEmacs Literate Configuration
#+AUTHOR: Rahul M. Juliato
#+DATE: <2024-11-15 Fri>
#+PROPERTY: header-args :tangle yes

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

* Header
#+BEGIN_SRC emacs-lisp
  ;;; lemacs-init.el --- LEmacs (Lionyx Emacs) -*- lexical-binding: t; -*-
  ;;
  ;; Author: Rahul M. Juliato <rahul.juliato@gmail.com>
  ;; URL: https://github.com/LionyxML/lemacs
  ;; Keywords: config, emacs, init
  ;; Version: 0.2.3
  ;; Package-Requires: ((emacs "30"))

  ;;; Commentary:
  ;; My personal always evolving Emacs config file.

  ;;; License:
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Code:
#+END_SRC

* Package Management
We use the built-in **package.el** in order to install packages, 3rd or 1st party.

Every package is declared using the **use-package** macro, with deffered execution,
meaning faster loading time for Emacs.

On the first install we also byte compile and native compile every package,
avoiding to spend time and resources while actually using Emacs.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-check-signature nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (eval-and-compile
    (setq use-package-always-ensure t
          use-package-expand-minimally t))
#+END_SRC

* LEMACS Installer
This is the **LEmacs** installer function. It should be called after init is loaded
(hence, all packages are installed and compiled), to perform some post-package install
actions, such as install fonts and treesitter grammars.

#+BEGIN_SRC emacs-lisp
  (defun lemacs/first-install ()
    "Install tree-sitter grammars and nerd-icons fonts on the first run."
    (interactive)
    (switch-to-buffer "*Messages*")

    (message ">>> All required packages installed and byte compiled.")
    (message ">>> Configuring LEmacs...")

    (message ">>> Configuring Tree Sitter parsers...")
    (require 'treesit-auto)
    (treesit-auto-install-all)

    (message ">>> Configuring Nerd Fonts...")
    (require 'nerd-icons)
    (nerd-icons-install-fonts 'always)

    (message ">>> LEmacs installed!!! Presss any key to close the installer and open Emacs normally.")
    (read-key)
    (kill-emacs))

  (defun lemacs/recompile-all ()
    "Flushes old packages compiled cache and recompiles all packages."
    (interactive)
    (switch-to-buffer "*Messages*")
    (message ">>> Native compile 3rd-party packages...")
    (native-compile-prune-cache)
    (dolist (dir (directory-files package-user-dir t "^[^.]" t))
      (when (file-directory-p dir)
        (byte-recompile-directory dir 0 t)
        (native-compile-async dir 'recursively)))
    (switch-to-buffer "*Async-native-compile-log*"))

#+END_SRC

* LEMACS Custom Options
LEmacs provides some useful switches you can use to customize your experience.

Don't like Evil? Ok, switch to Emacs bindings.

Want eglot instead of lsp-mode? No problem, just change a switch.

Not a fan of nerd-fonts? Just switch it off.

And many more...

#+BEGIN_SRC emacs-lisp
  (defcustom lemacs-input-mode 'evil
    "The input mode to use."
    :type '(choice
            (const :tag "evil" evil)
            (const :tag "emacs" emacs))
    :group 'lemacs)

  (defcustom lemacs-lsp-client 'lsp-mode
    "The LSP implementation to use."
    :type '(choice
            (const :tag "eglot" eglot)
            (const :tag "lsp-mode" lsp-mode)
            (const :tag "none" nil))
    :group 'lemacs)

  (defcustom lemacs-in-buffer-completion 'corfu
    "The in-buffer completion to use."
    :type '(choice
            (const :tag "corfu" corfu)
            (const :tag "none" nil))
    :group 'lemacs)

  (defcustom lemacs-polymode 'off
    "Enables polymode, like to styled-components on style[s|d].[t|j]sx? files.
      Notice this is a bit messy."
    :type '(choice
            (const :tag "on" 1)
            (const :tag "off" nil))
    :group 'lemacs)

  (defcustom lemacs-ligatures 'on
    "Enables fonts ligatures on GUI Emacs."
    :type '(choice
            (const :tag "on" 1)
            (const :tag "off" nil))
    :group 'lemacs)

  (defcustom lemacs-docker-executable 'podman
    "The executable to be used with docker-mode."
    :type '(choice
            (const :tag "docker" docker)
            (const :tag "podman" podman))
    :group 'lemacs)

  (defcustom lemacs-nerd-icons 't
    "Enables Nerd Icons provided by Nerd Fonts.
    Requires an installed patched Nerd Font."
    :type '(choice
            (const :tag "t" t)
            (const :tag "nil" nil))
    :group 'lemacs)

  (defcustom lemacs-ascii-art 'blur
    "Enables ASCII art on GUI Emacs."
    :type '(choice
            (const :tag "lemacs" lemacs)
            (const :tag "baron" baron)
            (const :tag "blur" blur)
            (const :tag "blood" blood)
            (const :tag "nil" nil))
    :group 'lemacs)

  (defvar lemacs-art "
                ████████  ▄▄▄▄▄███▄▄▄▄▄    ████████  ████████ █████████
      █       ██    ███ ██▀▀▀███▀▀▀██  ██    ███ ██    ███ ███    ███
      ███       ███    ██ ███   ███   ███  ███    ███ ███    ██ ███    ██
      ███      ███▄▄▄     ███   ███   ███  ███    ███ ███        ███
      ███       ███▀▀▀     ███   ███   ███ ██████████ ███       ██████████
      ███       ███    ██ ███   ███   ███  ███    ███ ███    ██        ███
      ███     ███    ███ ███   ███   ███  ███    ███ ███    ███ ██    ███
      █████████ ██████████ ██   ███   ██  ███    ██ ██████████████████
      
      ")

  (defvar lemacs-baron-art "
      ⣀
     ⠈⢿⣦
      ⠘⣿⣷⡀
       ⠸⣿⣷⡄     ⣤⣤⡀             ⢀
        ⠸⣿⣿⡄   ⢸⣿⣿⣷⣄          ⣠⣴⣿⡇
         ⢻⣿⣷⡄  ⣾⣿⣿⣿⣿⣦       ⣠⣾⣿⣿⣿⠃
          ⢿⣿⣧  ⣿⣿⣿⣿⣿⣿⣷⣤⣤⣤⣤⣴⣾⣿⣿⣿⣿⣿
          ⢸⣿⣿⡆ ⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏
          ⢸⣿⣿⣧ ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃
          ⠘⣿⣿⣿⣦⣿⣿⣿⣿⣿⣿⠟⠛⢿⣿⣿⣿⣿⣿⠛⠻⣿⣆
         ⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇   ⢻⣿⣿⣿⣿  ⣿⣿⠃
       ⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⣀⣀⣾⣿⣿⣿⣿⣦⣤⣿⣿⡆
      ⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋
     ⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁
     ⣸⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄
     ⣿⣿⣿⡿⠋  ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷
    ⣰⣿⣿⠏    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⡆
   ⣰⣿⣿⡏     ⢸⣿⣿⣿⣿⣿⡟⠛⠛⠛⠛⠁ ⠈⠙⣿⣿⣿⣿⣷⡄
  ⣼⣿⣿⣿⠷⠄     ⣿⣿⣿⣿⣿⠃        ⠘⢿⣿⣿⣿⣷⡀
  ⠉⠉⠉⠁       ⣿⣿⣿⣿⡇          ⠈⢿⣿⣿⣿⣧⡀
             ⣿⣿⣿⣿⡇           ⠈⢻⣿⣿⣿⣷⡀
            ⢠⣿⣿⣿⣿⡇             ⢻⣿⣿⣿⣿⣷⣤⡀
            ⢸⣿⣿⣿⣿⠃             ⠸⣿⣿⣿⣿⣿⣿⡇
            ⢸⣿⣿⣿⣿⡀              ⠙⠛⠛⠛⠛⠋⠁
           ⢠⣿⣿⣿⣿⣿⣿⣦
           ⣼⣿⣿⣿⣿⣿⣿⣿
           ⠻⠿⣿⣿⠿⠿⠏
      ")

  (defcustom lemacs-start-transparent 't
    "Makes Emacs use Transparency when loaded."
    :type '(choice
            (const :tag "t" t)
            (const :tag "nil" nil))
    :group 'lemacs)

  (defcustom lemacs-default-terminal-emulator 'eshell
    "Default terminal `emulator/shell' for lemacs.
      Possible values are `eshell' or `eat'.  Yes, I known,
      eshell is not a term emulator, but on broader terms,
      it is a shell inside a window, hence I'm threading
      both as options to ~when I need to run a term~."
    :type 'symbol
    :group 'lemacs)

  (defcustom lemacs-default-projects-folder "~/Projects"
    "Default place to search for projects with `lemacs/find-projects-and-switch'."
    :type 'string
    :group 'lemacs)

  (defcustom lemacs-default-theme 'modus
    "Default LEmacs Theme.  Change it to nil to set your own."
    :type '(choice
            (const :tag "catppuccin" "catppuccin")
            (const :tag "modus" "modus")
            (const :tag "nil" nil))
    :group 'lemacs)


  (defcustom lemacs-default-modeline 'emacs
    "Default LEmacs Modeline."
    :type '(choice
            (const :tag "doom" "doom")
            (const :tag "emacs" "emacs")
            (const :tag "nil" nil))
    :group 'lemacs)

  (defcustom lemacs-default-initial-buffer 'dashboard
    "Default LEmacs initial buffer."
    :type '(choice
            (const :tag "scratch" "scratch")
            (const :tag "dashboard" "dashboard")
            (const :tag "terminal" "terminal"))
    :group 'lemacs)

  (defcustom lemacs-codeium-scope 'nil
    "Default Codeium (AI assist) scope."
    :type '(choice
            (const :tag "everywhere" "everywhere")
            (const :tag "prog-mode" "prog-mode")
            (const :tag "nil" nil))
    :group 'lemacs)

#+END_SRC

* EMACS Internals
In this section we configure Emacs built-in options and packages.

** Emacs General Configurations
**Note About GNUPG**:

Each system uses **gnupg** with a diferent agent.

From TUI, maybe it is enough to set something like:

#+BEGIN_SRC bash :tangle no
  export GPG_TTY=$(tty)
#+END_SRC

On the other hand, for GUI, you need to have something on the
**~/.gnupg/gpg-agent.conf** file, such as:

#+BEGIN_SRC bash :tangle no
  # For macos
  brew install pinentry-mac
  echo "pinentry-program /opt/homebrew/bin/pinentry-mac" > ~/.gnupg/gpg-agent.conf
#+END_SRC

or

#+BEGIN_SRC bash :tangle no
    # For linux
    echo "pinentry-program /usr/bin/pinentry-gtk-2" > ~/.gnupg/gpg-agent.conf
    # or... pinentry, pinentry-gnome3, pinentry-x11, etc.
#+END_SRC


**Note about LS**

Make sure if you're under **macos** that you have **gls** installed, since the BSD
Utils provided ls lacks the **--dired** flag.


  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :custom
      (auto-revert-verbose t)
      (bookmark-fringe-mark nil)
      (undo-limit 67108864) ; 64mb.
      (undo-strong-limit 100663296) ; 96mb.
      (undo-outer-limit 1006632960) ; 960mb.
      (auto-save-default nil)
      (create-lockfiles nil)
      (display-line-numbers-type 'relative)
      (enable-recursive-minibuffers t)
      (epa-keys-select-method 'minibuffer)
      (help-window-select t)
      (ibuffer-show-empty-filter-groups nil)
      (indent-tabs-mode nil)
      (inhibit-splash-screen t)
      (inhibit-startup-buffer-menu t)
      (inhibit-startup-echo-area-message user-login-name)
      (inhibit-startup-screen t)
      (inhibit-x-resources t)
      (initial-scratch-message "")
      (ispell-dictionary "en_US")
      (line-spacing 1)
      (make-backup-files nil)
      (native-comp-async-report-warnings-errors 'silent)
      (org-babel-load-languages '((emacs-lisp . t) (python . t) (ruby . t) (shell . t)))
      (pixel-scroll-precision-use-momentum nil)
      (ring-bell-function 'ignore)
      (remote-file-name-inhibit-delete-by-moving-to-trash t)
      (remote-file-name-inhibit-auto-save t)
      (shr-use-colors nil)
      (shr-use-fonts nil)
      (split-width-threshold 300)
      (switch-to-buffer-obey-display-actions t)
      (tab-always-indent 'complete) ;; TAB serves as M-TAB to completion
      (tab-width 4)
      (tramp-connection-timeout (* 60 10)) ; seconds
      (treesit-font-lock-level 4)
      (truncate-lines t)
      (tsx-ts-mode-indent-offset 4)
      (typescript-ts-mode-indent-offset 4)
      (use-dialog-box nil)
      (use-file-dialog nil)
      (use-short-answers t)
      (warning-minimum-level :emergency)
      (window-combination-resize t)
      (grep-find-ignored-directories
       '("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "node_modules" "build" "dist"))
      :hook
      (prog-mode . display-line-numbers-mode)
      :config
      ;; Settings per OS
      (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 100)

      (when (eq system-type 'darwin)
        (setq insert-directory-program "gls")
        (setq mac-option-key-is-meta nil
              mac-option-modifier nil
              mac-command-key-is-meta t
              mac-command-modifier 'meta)
        (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 140))

      ;; Modeline fonts ajustments per OS
      (unless (eq system-type 'darwin)
        (if (facep 'mode-line-active)
            (set-face-attribute 'mode-line-active nil
                                :family "JetBrainsMono Nerd Font"
                                :height 100) ; For 29+
          (set-face-attribute 'mode-line nil
                              :family "JetBrainsMono Nerd Font"
                              :height 100))
        (set-face-attribute 'mode-line-inactive nil
                            :family "JetBrainsMono Nerd Font"
                            :height 100))

      (when (eq system-type 'darwin)
        (if (facep 'mode-line-active)
            (set-face-attribute 'mode-line-active nil
                                :family "JetBrainsMono Nerd Font"
                                :height 130) ; For 29+
          (set-face-attribute 'mode-line nil
                              :family "JetBrainsMono Nerd Font"
                              :height 130))
        (set-face-attribute 'mode-line-inactive nil
                            :family "JetBrainsMono Nerd Font"
                            :height 130))

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      (defun lemacs/find-projects-and-switch (&optional directory)
        "Find and switch to a project directory from ~/Projects."
        (interactive)
        (let* ((d (or directory lemacs-default-projects-folder))
               (find-command (concat "find " d " -mindepth 1 -maxdepth 4 -type d"))
               (project-list (split-string (shell-command-to-string find-command) "\n" t))
               (selected-project (completing-read "Select project: " project-list)))
          (when (and selected-project (file-directory-p selected-project))
            (project-switch-project selected-project))))

      (defun lemacs/transparency-set ()
        "Set frame transparency (Graphical Mode)."
        (interactive)
        (set-frame-parameter (selected-frame) 'alpha '(90 90)))

      (defun lemacs/transparency-unset ()
        "Unset frame transparency (Graphical Mode)."
        (interactive)
        (set-frame-parameter (selected-frame) 'alpha '(100 100)))

      ;; Apply transparency
      (when lemacs-start-transparent
        (lemacs/transparency-set))

      (defun lemacs/rename-buffer-and-move-to-new-window ()
        "Promotes a side buffer to a new window."
        (interactive)
        (let ((temp-name (make-temp-name "temp-buffer-")))
          (rename-buffer temp-name t)
          (delete-window)
          (split-window-right)
          (switch-to-buffer temp-name)))
      (global-set-key (kbd "C-x x x") 'lemacs/rename-buffer-and-move-to-new-window)

      (defun lemacs/all-available-fonts ()
        "Create and visit a buffer containing a sorted list of available fonts."
        (interactive)
        (let ((font-list (sort (x-list-fonts "*") #'string<))
              (font-buffer (generate-new-buffer "*Font List*")))
          (with-current-buffer font-buffer
            (dolist (font font-list)
              (let* ((font-family (nth 2 (split-string font "-"))))
                (insert (format "%s\n" (propertize font 'face `(:family ,font-family :height 110))))))
            (goto-char (point-min))
            (setq buffer-read-only t))
          (pop-to-buffer font-buffer)))

      ;; Enable indent-tabs-mode (no tabs) for all prog-modes
      (defun lemacs/prefer-tabs ()
        "Disables indent-tabs-mode, and prefer spaces over tabs."
        (interactive)
        (indent-tabs-mode -1))
      (add-hook 'prog-mode-hook #'lemacs/prefer-tabs)


      ;; Play media from eww through MPV
      (defun lemacs/eww-play-media ()
        "Play the current media link in MPV."
        (interactive)
        (eww-copy-page-url)
        (let ((url (current-kill 0)))
          (message (concat ">>> Sent to mpv: " url))
          (start-process "mpv" nil "mpv" "--cache=yes" "--force-window=yes" url)))

      ;; Add prompt indicator to `completing-read-multiple'.
      ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
      (defun crm-indicator (args)
        (cons (format "[CRM%s] %s"
                      (replace-regexp-in-string
                       "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                       crm-separator)
                      (car args))
              (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Unbinds C-z to (suspend-frame)
      (global-unset-key (kbd "C-z"))
      (global-unset-key (kbd "C-x C-z"))

      ;; Page down and center
      (global-set-key (kbd "C-v") (lambda ()
                                    (interactive)
                                    (scroll-up-command)
                                    (recenter)
                                    ))


      ;; Page up and center if not on beginning of buffer
      (global-set-key (kbd "M-v") (lambda ()
                                    (interactive)
                                    (scroll-down-command)
                                    (unless (= (window-start) (point-min))
                                      (recenter))
                                    (when (= (window-start) (point-min))
                                      (let ((midpoint (/ (window-height) 2)))
                                        (goto-char (window-start))
                                        (forward-line midpoint)
                                        (recenter midpoint)))))


      (defun lemacs/outline-set-buffer-local-ellipsis (ellipsis)
        "Apply the ellipsis ELLIPSIS to outline mode locally to a buffer."
        (let* ((display-table (or buffer-display-table (make-display-table)))
               (face-offset (* (face-id 'shadow) (ash 1 22)))
               (value (vconcat (mapcar (lambda (c) (+ face-offset c)) ellipsis))))
          (set-display-table-slot display-table 'selective-display value)
          (setq buffer-display-table display-table)))
      (add-hook 'outline-minor-mode-hook
                #'(lambda() (lemacs/outline-set-buffer-local-ellipsis " ▼ ")))

      ;; Starts elisp with outline collapse
      (defun lemacs/elisp-mode-hook ()
        (interactive)
        (outline-minor-mode 1)
        (outline-hide-sublevels 1))
      ;; (add-hook 'emacs-lisp-mode-hook #'lemacs/elisp-mode-hook)


      ;; Save manual customizations to other file than init.el
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)

      ;; Duplicate line
      (defun lemacs/duplicate-line-or-region (&optional n)
        "Duplicate current line, or region if active.
    With argument N, make N copies.
    negative N, comment out original line and use the absolute value."
        (interactive "*p")
        (let ((use-region (use-region-p)))
          (save-excursion
            (let ((text (if use-region                 ;Get region if active, otherwise line
                            (buffer-substring (region-beginning) (region-end))
                          (prog1 (thing-at-point 'line)
                            (end-of-line)
                            (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                                (newline))))))
              (dotimes (_ (abs (or n 1)))               ;Insert N times, or once if not specified
                (insert text))))
          (if use-region nil                                   ;Only if we're working with a line (not a region)
            (let ((pos (- (point) (line-beginning-position)))) ;Save column
              (if (> 0 n)                                      ;Comment out original with negative arg
                  (comment-region (line-beginning-position) (line-end-position)))
              (forward-line 1)
              (forward-char pos)))))

      ;; Welcome to LEmacs
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (message "Emacs has fully loaded. This code runs after startup.")

                  ;; (profiler-report)
                  ;; (profiler-stop)

                  (with-current-buffer (get-buffer-create "*scratch*")
                    (insert (format "%s

        Loading time : %s
        Packages     : %s
    "
                                    lemacs-art
                                    (emacs-init-time)
                                    (number-to-string (length package-activated-list)))))))

      ;; LEmacs default starting buffer if no arguments or file
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (let* ((filtered-args (seq-filter
                                         (lambda (arg)
                                           (not (member arg '("-Q" "-nw" "--eval"))))
                                         command-line-args)))
                    (when (= (length filtered-args) 1)
                      (ignore-errors
                        (pcase lemacs-default-initial-buffer
                          ('scratch (scratch-buffer))
                          ('dashboard (dashboard-open))
                          ('terminal (lemacs/open-term))))))))

      ;; Runs 'private.el' after Emacs inits
      (add-hook 'after-init-hook
                (lambda ()
                  (let ((private-file (expand-file-name "private.el" user-emacs-directory)))
                    (when (file-exists-p private-file)
                      (load private-file)))))

      ;; Add option "d" to whenever using C-x s or C-x C-c, allowing a quick preview
      ;; of the diff of what you're asked to save.
      (add-to-list 'save-some-buffers-action-alist
             (list "d"
                   (lambda (buffer) (diff-buffer-with-file (buffer-file-name buffer)))
                   "show diff between the buffer and its file"))

      :bind
      (("C-x C-b" . 'ibuffer)
       ("M-j" . 'duplicate-dwim))
      :init
      (when (eq lemacs-default-theme 'catppuccin)
        (ignore-errors
          (load-theme 'catppuccin :no-confirm)))

      ;; Makes everything accept utf-8 as default, so buffers with tsx and so
      ;; won't ask for encoding (because undecided-unix) every single keystroke
      (modify-coding-system-alist 'file "" 'utf-8)

      ;; Emacs frame starts focused
      (select-frame-set-input-focus (selected-frame))

      ;; Emacs frame starts maximized
      (toggle-frame-maximized)

      (delete-selection-mode 1)
      (blink-cursor-mode -1)
      (desktop-save-mode -1)
      (file-name-shadow-mode 1)
      (global-auto-revert-mode 1)
      (indent-tabs-mode -1)
      (pixel-scroll-precision-mode 1)
      (save-place-mode 1)
      (savehist-mode 1)
      (winner-mode 1)
      (xterm-mouse-mode 1))
#+END_SRC

** Built-In Packages
*** Auth-Source
This is needed for open .gpg files without problems.

#+BEGIN_SRC emacs-lisp
  (use-package auth-source
    :ensure nil
    :defer t
    :config
    (setq auth-sources
          (list (expand-file-name ".authinfo.gpg" user-emacs-directory)))
    (setq user-full-name "Rahul Martim Juliato"
          user-mail-address "rahul.juliato@gmail.com")

    ;; Use `pass` as an auth-source
    (when (file-exists-p "~/.password-store")
      (auth-source-pass-enable)))

#+END_SRC

*** Dired
The magic file explorer.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :defer t
    :commands (dired)
    :hook ((dired-mode . dired-hide-details-mode)
           (dired-mode . hl-line-mode)
           (dired-mode . turn-on-gnus-dired-mode))
    :custom
    (dired-dwim-target t)
    (dired-guess-shell-alist-user
     '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open" "open")
       ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mpv" "xdg-open" "open")
       (".*" "xdg-open" "open")))
    (dired-kill-when-opening-new-dired-buffer t)
    ;; (dired-listing-switches "-lah --group-directories-first")
    (dired-listing-switches "-alhoF --group-directories-first --time-style=long-iso")
    (delete-by-moving-to-trash t)
    (dired-mouse-drag-files t)
    (dired-do-revert-buffer t)
    (dired-auto-revert-buffer t)
    (dired-free-space nil)
    (dired-mouse-drag-files t)
    (dired-make-directory-clickable t)
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    :init
    (defun dired-get-size ()
      "On hitting ? gets the selected or under cursor file/dir size."
      (interactive)
      (let ((files (dired-get-marked-files)))
        (with-temp-buffer
          (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
          (message "Size of all marked files: %s"
                   (progn
                     (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
                     (match-string 1)))))))

#+END_SRC

*** WDired
#+BEGIN_SRC emacs-lisp
  (use-package wdired
    :ensure nil
    :commands (wdired-change-to-wdired-mode)
    :config
    (setq wdired-allow-to-change-permissions t)
    (setq wdired-create-parent-directories t))
#+END_SRC

*** I-Search
The magical in-buffer searcher.

#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :ensure nil
    :defer t
    :config
    (setq isearch-lazy-count t)
    (setq lazy-count-prefix-format "(%s/%s) ")
    (setq lazy-count-suffix-format nil)
    (setq search-whitespace-regexp ".*?")

    (defun isearch-copy-selected-word ()
      "Copy the current `isearch` selection to the kill ring."
      (interactive)
      (when isearch-other-end
        (let ((selection (buffer-substring-no-properties isearch-other-end (point))))
          (kill-new selection)
          (isearch-exit))))

    ;; Bind `M-w` in isearch to copy the selected word, so M-s M-. M-w
    ;; does a great job of 'copying the current word under cursor'.
    (define-key isearch-mode-map (kbd "M-w") 'isearch-copy-selected-word))

#+END_SRC

*** GNUS
The GNUS mail / newsreader.

Notice your **<emacs-dir>/gnus** should contain all the gnus files, such as:
- gnus.el
- newsrc
- newsrc.eld

#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :ensure nil
    :defer t
    :custom
    (gnus-init-file (expand-file-name "gnus/.gnus.el" user-emacs-directory)))

#+END_SRC

*** Time
The right time wherever you are.

#+BEGIN_SRC emacs-lisp
  (use-package time
    :ensure nil
    ;; :hook (after-init . display-time-mode) ;; If we'd like to see it on the modeline
    :custom
    (world-clock-time-format "%A %d %B %r %Z")
    (display-time-day-and-date t)
    (display-time-default-load-average nil)
    (display-time-mail-string "")
    (zoneinfo-style-world-list
     '(("America/Los_Angeles" "Los Angeles")
       ("America/Vancouver" "Vancouver")
       ("Canada/Pacific" "Canada/Pacific")
       ("America/Chicago" "Chicago")
       ("America/Toronto" "Toronto")
       ("America/New_York" "New York")
       ("Canada/Atlantic" "Canada/Atlantic")
       ("Brazil/East" "Brasília")
       ("America/Sao_Paulo" "São Paulo")
       ("UTC" "UTC")
       ("Europe/Lisbon" "Lisbon")
       ("Europe/Brussels" "Brussels")
       ("Europe/Athens" "Athens")
       ("Asia/Riyadh" "Riyadh")
       ("Asia/Tehran" "Tehran")
       ("Asia/Tbilisi" "Tbilisi")
       ("Asia/Yekaterinburg" "Yekaterinburg")
       ("Asia/Kolkata" "Kolkata")
       ("Asia/Singapore" "Singapore")
       ("Asia/Shanghai" "Shanghai")
       ("Asia/Seoul" "Seoul")
       ("Asia/Tokyo" "Tokyo")
       ("Asia/Vladivostok" "Vladivostok")
       ("Australia/Brisbane" "Brisbane")
       ("Australia/Sydney" "Sydney")
       ("Pacific/Auckland" "Auckland"))))
#+END_SRC

*** Proced
A package to watch for system processes, like **top** on Unix like systems.

#+BEGIN_SRC emacs-lisp
  (use-package proced
    :ensure nil
    :defer t
    :custom
    (proced-enable-color-flag t)
    (proced-tree-flag t)
    (proced-auto-update-flag 'visible)
    (proced-auto-update-interval 5)
    (proced-descent t)
    (proced-filter 'user)) ;; We can change interactively with `s'
#+END_SRC

*** ERC
The great IRC client.

#+BEGIN_SRC emacs-lisp
  (use-package erc
    :ensure nil
    :defer t
    :init
    (with-eval-after-load 'erc
      (add-to-list 'erc-modules 'sasl))

    (setopt erc-sasl-mechanism 'external)

    (defun erc-liberachat ()
      (interactive)
      (erc-tls :server "irc.libera.chat"
               :port 6697
               :user ""
               :password ""
               :client-certificate
               (list
                ;; Put your certificate on ~/.emacs.d/erc/ or change this
                (expand-file-name "erc/cert.pem" user-emacs-directory)
                (expand-file-name "erc/cert.pem" user-emacs-directory))))

    (defun lemacs-erc-enable-flyspell ()
      "Enable Flyspell mode in ERC buffers."
      (flyspell-mode 1))
    (add-hook 'erc-join-hook 'lemacs-erc-enable-flyspell)

    :custom
    (erc-join-buffer 'window)
    (erc-buffer-display 'window)
    (erc-hide-list '("JOIN" "PART" "QUIT"))
    (erc-kill-buffer-on-part t)
    (erc-track-shorten-start 6)
    (erc-timestamp-format "[%H:%M]")
    (erc-autojoin-channels-alist '((".*\\.libera\\.chat" "#emacs" "#systemcrafters"))))
#+END_SRC

*** EShell
The Elisp Shell. Here we have some customized functions to make life on eshell easier.

Also, there are a lot of **tmux-like** functions in order to be able to open/close eshell
in a horizontal/vertical split, or new tab.

Our version control aware **prompt** is set here also.

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure nil
    :defer nil
    :custom
    (eshell-buffer-maximum-lines 10000)
    (eshell-hist-ignoredups t)
    (eshell-cmpl-cycle-completions nil)
    (eshell-cmpl-ignore-case t)
    (eshell-ask-to-save-history (quote always))
    (eshell-cd-on-directory t)
    (eshell-history-size 10000)
    (eshell-scroll-to-bottom-on-input t)
    (eshell-input-filter 'lemacs/eshell-input-filter)
    :config
    (defun lemacs/eshell-input-filter (input)
      "Do not save on the following:
         - empty lines
         - commands that start with a space, `ls`/`l`/`lsd`
      NOTE: stolen from https://github.com/gopar/.emacs.d"
      (and
       (eshell-input-filter-default input)
       (eshell-input-filter-initial-space input)
       (not (string-prefix-p "ls " input))
       (not (string-prefix-p "lsd " input))
       (not (string-prefix-p "l " input))))

    (defun eshell/cat-with-syntax-highlighting (filename)
      "Like cat(1) but with syntax highlighting.
  Stole from aweshell"
      (let ((existing-buffer (get-file-buffer filename))
            (buffer (find-file-noselect filename)))
        (eshell-print
         (with-current-buffer buffer
           (if (fboundp 'font-lock-ensure)
               (font-lock-ensure)
             (with-no-warnings
               (font-lock-fontify-buffer)))
           (let ((contents (buffer-string)))
             (remove-text-properties 0 (length contents) '(read-only nil) contents)
             contents)))
        (unless existing-buffer
          (kill-buffer buffer))
        nil))
    (advice-add 'eshell/cat :override #'eshell/cat-with-syntax-highlighting)


    (defun eshell/x (&rest args)
      "Run a command in a vertical split `eat` buffer."
      (let ((command (car args))
            (arguments (cdr args)))
        (split-window-right)
        (other-window 1)
        (apply 'eat command arguments)))

    (defun lemacs/open-term  ()
      "Open the default terminal emulator based on lemacs-default-terminal-emulator."
      (interactive)
      (pcase lemacs-default-terminal-emulator
        ('eshell (eshell 'N))
        ('eat (eat nil 'N))
        (_ (error "Unknown terminal emulator: %s" lemacs-default-terminal-emulator))))

    (defun lemacs/close-term ()
      "Closes the eshell (or any buffer). If it is the last window, close the current tab instead of deleting the window."
      (interactive)
      (let ((current-tab (tab-bar--current-tab)))
        (kill-buffer (current-buffer))       ; Kill the current buffer
        (if (one-window-p)
            (tab-bar-close-tab current-tab)  ; Close the tab if it's the last window
          (delete-window))))                 ; Otherwise, just delete the window

    (defun lemacs/split-term-vertical ()
      "Split the window vertically and open a new instance of eshell."
      (interactive)
      (split-window-right)
      (other-window 1)
      (lemacs/open-term))

    (defun lemacs/split-term-horizontal ()
      "Split the window horizontally and open a new instance of eshell."
      (interactive)
      (split-window-below)
      (other-window 1)
      (lemacs/open-term))

    (defun lemacs/open-term-new-tab ()
      "Open eshell in a new tab."
      (interactive)
      (let ((new-tab (generate-new-buffer-name
                      (pcase lemacs-default-terminal-emulator
                        ('eshell "*eshell*")
                        ('eat "*eat*")
                        (_ (error "Unknown terminal emulator: %s" lemacs-default-terminal-emulator))))))
        (tab-new)
        (lemacs/open-term)
        (rename-buffer new-tab)))

    (defun lemacs/kill-all-shell-buffers ()
      "Kill all *eshell* buffers."
      (interactive)
      (let ((eshell-buffers
             (cl-remove-if-not
              (lambda (buffer)
                (string-prefix-p
                 (pcase lemacs-default-terminal-emulator
                   ('eshell "*eshell*")
                   ('eat "*eat*")
                   (_ (error "Unknown terminal emulator: %s" lemacs-default-terminal-emulator)))
                 (buffer-name buffer)))
              (buffer-list))))

        (if eshell-buffers
            (progn
              (message "Killing *eshell* buffers:")
              (dolist (buffer eshell-buffers)
                (message "  %s" (buffer-name buffer))
                (kill-buffer buffer)))
          (message "No *eshell* buffers to kill."))))

    (global-set-key (kbd "C-c e e") 'lemacs/open-term )
    (global-set-key (kbd "C-c e v") 'lemacs/split-term-vertical)
    (global-set-key (kbd "C-c e \\") 'lemacs/split-term-vertical)
    (global-set-key (kbd "C-c e |") 'lemacs/split-term-vertical)

    (global-set-key (kbd "C-c e h") 'lemacs/split-term-horizontal)
    (global-set-key (kbd "C-c e -") 'lemacs/split-term-horizontal)
    (global-set-key (kbd "C-c e s") 'lemacs/split-term-horizontal)

    (global-set-key (kbd "C-c e k") 'lemacs/kill-all-shell-buffers)
    (global-set-key (kbd "C-c e t") 'lemacs/open-term-new-tab)

    (global-set-key (kbd "C-c e x") 'lemacs/close-term)

    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-mode-map "\C-a" 'eshell-bol)
                (define-key eshell-mode-map "\C-r" 'consult-history)
                (define-key eshell-mode-map [up] 'previous-line)
                (define-key eshell-mode-map [down] 'next-line)
                (local-set-key (kbd "C-l")
                               (lambda ()
                                 (interactive)
                                 (eshell/clear 1)
                                 (eshell-send-input)))))

    (require 'vc-git)
    (setq eshell-prompt-function
          (lambda ()
            (concat
             "┌─("
             (if (> eshell-last-command-status 0)
                 (nerd-icons-faicon "nf-fa-close")
               (nerd-icons-faicon "nf-fa-check"))
             " "
             (number-to-string eshell-last-command-status)
             ")──("
             (nerd-icons-faicon "nf-fa-user")
             " "
             (or (file-remote-p default-directory 'user) (user-login-name))
             ")──("
             (nerd-icons-faicon "nf-fa-network_wired")
             " "
             (or (file-remote-p default-directory 'host) (system-name))
             ")──("
             (nerd-icons-mdicon "nf-md-clock")
             " "
             (format-time-string "%H:%M:%S" (current-time))
             ")──("
             (nerd-icons-faicon "nf-fa-folder")
             " "
             (let ((path (abbreviate-file-name (eshell/pwd))))
               (if (file-remote-p path)
                   (string-remove-prefix (file-remote-p path) path)
                 path))
             ")\n"
             (when (and (fboundp 'vc-git-root) (vc-git-root default-directory))
               (concat
                "├─("
                (nerd-icons-devicon "nf-dev-git_branch")
                " "
                (car (vc-git-branches))
                (let* ((branch (car (vc-git-branches)))
                       (behind (string-to-number
                                (shell-command-to-string
                                 (concat "git rev-list --count HEAD..origin/" branch)))))
                  (if (> behind 0)
                      (concat "  " (nerd-icons-faicon "nf-fa-cloud_download") " " (number-to-string behind))
                    ""))

                (let ((modified (length (split-string
                                         (shell-command-to-string
                                          "git ls-files --modified") "\n" t)))
                      (untracked (length (split-string
                                          (shell-command-to-string
                                           "git ls-files --others --exclude-standard") "\n" t))))
                  (concat
                   (if (> modified 0)
                       (concat "  " (nerd-icons-octicon "nf-oct-file_diff") " "
                               (number-to-string modified)))
                   (if (> untracked 0)
                       (concat "  " (nerd-icons-faicon "nf-fa-question_circle") " "
                               (number-to-string untracked)))))

                ")\n"
                ))
             "└─➜ ")))

    (setq eshell-prompt-regexp "└─➜ ")

    (add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))

    (setq eshell-visual-commands
          '("vi" "screen" "top"  "htop" "btm" "less" "more" "lynx" "ncftp" "pine" "tin" "trn"
            "elm" "irssi" "nmtui-connect" "nethack" "vim" "alsamixer" "nvim" "w3m"
            "ncmpcpp" "newsbeuter" "nethack" "mutt" "mpv" "cava")))

#+END_SRC

*** VC
Emacs built-in version control system.
Not that great for **git**, but still, very useful.

#+BEGIN_SRC emacs-lisp
  (use-package vc
    :ensure nil
    :defer t
    :config
    (setq vc-git-show-stash 0)
    (setq vc-git-diff-switches '("--patch-with-stat" "--histogram")) ;; add stats to `git diff'
    (setq vc-git-log-switches '("--stat")) ;; add statistics to `git log'
    (setq vc-git-log-edit-summary-target-len 50)
    (setq vc-git-log-edit-summary-max-len 70)
    (setq vc-git-print-log-follow t)
    (setq vc-git-revision-complete-only-branches nil) ; Emacs 28
    (setq vc-annotate-display-mode 'scale) ; scale to oldest
    (setq add-log-keep-changes-together t)
    (setq vc-annotate-color-map
          '((20 . "#f5e0dc")
            (40 . "#f2cdcd")
            (60 . "#f5c2e7")
            (80 . "#cba6f7")
            (100 . "#f38ba8")
            (120 . "#eba0ac")
            (140 . "#fab387")
            (160 . "#f9e2af")
            (180 . "#a6e3a1")
            (200 . "#94e2d5")
            (220 . "#89dceb")
            (240 . "#74c7ec")
            (260 . "#89b4fa")
            (280 . "#b4befe")))

    ;; This one is for editing commit messages
    (require 'log-edit)
    (setq log-edit-confirm 'changed)
    (setq log-edit-keep-buffer nil)
    (setq log-edit-require-final-newline t)
    (setq log-edit-setup-add-author nil)

    ;; We can see the files from the Diff with C-c C-d
    (remove-hook 'log-edit-hook #'log-edit-show-files)

    ;; Extending vc-mode
    (defun vc-git-push-all-remotes ()
      "Push the current branch to all Git remotes."
      (interactive)
      (let* ((branch (string-trim (shell-command-to-string "git rev-parse --abbrev-ref HEAD")))
             (remotes (split-string (shell-command-to-string "git remote") "\n" t)))
        (dolist (remote remotes)
          (vc-git-command nil 0 nil "push" remote branch)))))

#+END_SRC

*** Diff
#+BEGIN_SRC emacs-lisp
  (use-package diff-mode
    :ensure nil
    :defer t
    :config
    (setq diff-default-read-only t)
    (setq diff-advance-after-apply-hunk t)
    (setq diff-update-on-the-fly t)
    (setq diff-font-lock-syntax 'hunk-also))
#+END_SRC

*** EDiff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
    :init
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    :config
    (setq ediff-keep-variants nil)
    (setq ediff-make-buffers-readonly-at-startup nil)
    (setq ediff-merge-revisions-with-ancestor t)
    (setq ediff-show-clashes-only t))
#+END_SRC

*** Window
Customizes the window package in order to make windows popup on the right spots.

#+BEGIN_SRC emacs-lisp
  (use-package window
    :ensure nil
    :defer t
    :custom
    (display-buffer-alist
     '(
       ;; ("\\*.*-e?shell\\*"  ;; we only want <project_name>-eshell to follow this rule
       ;;  (display-buffer-in-side-window)
       ;;  (window-height . 0.25)
       ;;  (side . bottom)
       ;;  (slot . -1))
       ("\\*\\(Backtrace\\|Warnings?\\|Compile-Log\\|Messages\\|Bookmark List\\|Ibuffer\\|Occur\\|eldoc\\|sh\\|env\\|python3\\|sudo\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 0))
       ("\\*\\(Flymake diagnostics\\|prettier er\\|xref\\|EGLOT\\|Org-Babel Er\\|Completions\\)"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 1))
       ("\\*\\([Hh]elp\\)\\*"
        (display-buffer-in-side-window)
        (window-width . 75)
        (side . right)
        (slot . 0))
       ("\\*\\(undo-tree\\)\\*"
        (display-buffer-in-side-window)
        (window-width . 50)
        (side . right)
        (slot . 1)))))
#+END_SRC

*** Whitespace
Deletes all trailing white-spaces when saving files.

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :defer t
    :hook (before-save . whitespace-cleanup))
#+END_SRC

*** Tab-Bar
The Emacs tab-bar system. Here we configure it to work as **tmux** tabs. Meaning every
created tab receives a number, not a 'title'.

#+BEGIN_SRC emacs-lisp
  (use-package tab-bar
    :ensure nil
    :defer t
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-new-button-show nil)
    :init
    ;; This aims to substitute tmux (or gnu/screen) with Emacs
    ;; Tabs are our tmux windows (new one with C-x t 2)
    ;; Windows are perspectives form persp-mode (new one with C-c p s)

    (setq tab-bar-position t)

    (setq tab-bar-auto-width t)
    (setq tab-bar-auto-width-min '(10 4))
    (setq tab-bar-auto-width-max '(50 5))

    (defun lemacs/renumber-tabs (&rest args)
      "Renumber all tabs according to their position.
  If MOVETOLAST is non-nil, do not return to the original tab after renumbering."
      (let ((keep-position (car args))
            (tabs (tab-bar-tabs))
            (current-tab-index (tab-bar--current-tab-index))) ;; Store the current tab index
        (dotimes (i (length tabs))
          (let* ((tab (nth i tabs))
                 (old-name (alist-get 'name tab))
                 (file-name "")         ;; Extend this logic if needed
                 (new-name (format " »%d« %s" (1+ i) file-name)))
            (tab-bar-select-tab (1+ i)) ;; Select the tab by its 1-based index
            (tab-bar-rename-tab new-name)))
        (when keep-position
          (tab-bar-select-tab (1+ current-tab-index)))))

    ;; Whenever we modify tabs, we want it renumbered
    (advice-add 'tab-close :after #'lemacs/renumber-tabs)
    (advice-add 'tab-close-other :after #'lemacs/renumber-tabs)
    (advice-add 'tab-new :after #'lemacs/renumber-tabs)
    ;; (advice-add 'tab-new :after (lambda (&rest _) (lemacs/renumber-tabs t)))

    ;; Whenever we modify persp-mode, we want tabs renumbered
    (add-hook 'persp-activated-functions #'lemacs/renumber-tabs)
    (add-hook 'persp-renamed-functions #'lemacs/renumber-tabs)
    (add-hook 'persp-created-functions #'lemacs/renumber-tabs)
    (add-hook 'persp-before-switch-functions #'lemacs/renumber-tabs)


    (defun lemacs/switch-tab-or-tab-bar ()
      "Switch between 2 tabs or choose if > 2 tabs are present."
      (interactive)
      (if (= (length (tab-bar-tabs)) 2)
          (tab-next)
        (call-interactively 'tab-bar-switch-to-tab)
        ))

    (global-set-key (kbd "M-r") 'lemacs/switch-tab-or-tab-bar)

    (tab-bar-mode 1))

#+END_SRC

*** ORG
Customizes org-mode looks and feel.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :mode ("\\.org\\'" . org-mode)
    :config
    (setq
     ;; Start collapsed for speed
     org-startup-folded t

     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")

    ;; Ellipsis styling
    (setq org-ellipsis " ▼ ")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))
#+END_SRC

*** Recentf
Uses the built-in system for remembering our recent files when opening
new files/directories.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure nil
    :defer t
    :hook
    (after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 100)
    (recentf-max-menu-items 25) ; I don't use the `menu-bar-mode', but this is good to know
    (recentf-save-file-modes nil)
    (recentf-keep nil)
    (recentf-auto-cleanup nil)
    (recentf-initialize-file-name-history nil)
    (recentf-filename-handlers nil)
    (recentf-show-file-shortcuts-flag nil))
#+END_SRC

*** Column-Number
Makes current column number appear on the modeline.

#+BEGIN_SRC emacs-lisp
  (use-package column-number
    :ensure nil
    :defer t
    :hook
    (after-init . column-number-mode))
#+END_SRC

*** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer t
    :ensure nil
    :hook
    (after-init . which-key-mode)

    :config
    (setq which-key-separator "  ")
    (setq which-key-prefix-prefix "... ")
    (setq which-key-max-display-columns 3)
    (setq which-key-idle-delay 1.5)
    (setq which-key-idle-secondary-delay 0.25)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-description-length 40))
#+END_SRC

*** Uniquify
This uniquifies buffers names.

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-strip-common-suffix t)
    (setq uniquify-after-kill-buffer-p t))
#+END_SRC

*** Man
#+BEGIN_SRC emacs-lisp
  (use-package man
    :ensure nil
    :commands (man)
    :config
    (setq Man-notify-method 'pushy)) ; does not obey `display-buffer-alist'

#+END_SRC

*** Diminish
Here we avoid having the trouble of installing `diminish` and adding
`:diminish` to every use-package declaration.

Notice this is only "on" if modeline is 'emacs, so it won't conflict
with doom-modeline.

#+BEGIN_SRC emacs-lisp
  (use-package lemacs-diminish
    :if (eq lemacs-default-modeline 'emacs)
    :ensure nil
    :defer t
    :init
    (defvar lemacs-hidden-minor-modes
      '(abbrev-mode
        eldoc-mode
        evil-collection-unimpaired-mode
        flyspell-mode
        lsp-lens-mode
        lsp-mode
        indent-guide-mode
        smooth-scroll-mode
        outline-minor-mode
        smartparens-mode
        undo-tree-mode
        olivetti-mode
        visual-line-mode
        persp-mode
        which-key-mode))

    (defun lemacs/purge-minor-modes ()
      (interactive)
      (dolist (x lemacs-hidden-minor-modes nil)
        (let ((trg (cdr (assoc x minor-mode-alist))))
          (when trg
            (setcar trg "")))))

    (add-hook 'after-change-major-mode-hook 'lemacs/purge-minor-modes)

    ;; SHORTEN BRANCH NAMES
    (defun lemacs/shorten-vc-mode (vc)
      "Shorten VC string to at most 20 characters, replacing 'Git-' with a branch symbol."
      (let* ((vc (replace-regexp-in-string "^ Git[:-]" " ⎇ " vc)))
        (if (> (length vc) 20)
            (concat (substring vc 0 20) "…")
          vc)))

    (defun lemacs/update-vc-mode ()
      "Update `vc-mode` to truncate its string representation."
      (interactive)
      (when vc-mode
        (setq vc-mode (lemacs/shorten-vc-mode vc-mode))))

    (add-hook 'find-file-hook
              (lambda ()
                (run-at-time 0.1 nil #'lemacs/update-vc-mode)))
    (add-hook 'after-save-hook #'lemacs/update-vc-mode))


#+END_SRC

* External Packages
These are the 3rd party packages we use to extend our favorite editor.

** Major Modes - Programming
*** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :defer t
    :ensure t
    :config
    (pcase lemacs-docker-executable
      ('docker
       (setq dockerfile-mode-command "docker"))
      ('podman
       (setq dockerfile-docker-command "podman"))))

#+END_SRC

*** DotEnv Mode
#+BEGIN_SRC emacs-lisp
  (use-package dotenv-mode
    :defer t
    :ensure t)
#+END_SRC

*** Geiser-Guile
#+BEGIN_SRC emacs-lisp
  (use-package geiser-guile
    :defer t
    :ensure t)
#+END_SRC

*** Handlebars
#+BEGIN_SRC emacs-lisp
  (use-package handlebars-mode
    :defer t
    :ensure t)

#+END_SRC

*** JS-PKG
#+BEGIN_SRC emacs-lisp
  (use-package js-pkg-mode
    :vc (:url "https://github.com/ovistoica/js-pkg-mode"
         :branch "main")
    :ensure t
    :defer t)

#+END_SRC

*** Markdown-Mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :bind
    (:map markdown-mode-map
          ("C-c C-e" . markdown-do))
    :mode ("README\\.md\\'" . gfm-mode)
    :custom
    (setq markdown-command "multimarkdown"))
#+END_SRC

*** PyEnv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :defer t
    :ensure t
    :after (:any python-ts-mode))
 #+END_SRC

*** Polymode
#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :if (eq lemacs-polymode 'on)
    :ensure t
    :defer t
    :config
    ;; React.JS styled-components "integration"
    (define-hostmode poly-typescript-hostmode nil
      "Typescript hostmode."
      :mode 'typescript-ts-mode)
    (define-innermode poly-typescript-cssinjs-innermode nil
      :mode 'css-mode
      :head-matcher "\\(styled\\|css\\|\\.attrs<[^>]+>\\([^)]+\\)\\)?[.()<>[:alnum:]]?+`"
      :tail-matcher "\`"
      :head-mode 'host
      :tail-mode 'host)
    (define-polymode poly-typescript-mode
      :hostmode 'poly-typescript-hostmode
      :innermodes '(poly-typescript-cssinjs-innermode))

    ;; I do not want this to proliferate to all  .[j|t]sx? files, so
    ;; I am limiting it to the styled? filenames
    (add-to-list 'auto-mode-alist '("\\(styled\\|style[sd]\\).[tj]sx?\\'" . poly-typescript-mode)))
#+END_SRC

*** Prisma
#+BEGIN_SRC emacs-lisp
  (use-package prisma-mode
    :defer t
    :mode "\\.prisma?\\'"
    :load-path "site-lisp/prisma-mode/")
#+END_SRC

*** Sly
#+BEGIN_SRC emacs-lisp
  (use-package sly
    :ensure t
    :defer t
    :init
    ;; 1.) Install sbcl systemwide (brew install sbcl | apt install sbcl)
    ;; 2.) Install the quicklisp package manager
    ;; $ curl -o /tmp/ql.lisp http://beta.quicklisp.org/quicklisp.lisp
    ;; $ sbcl --no-sysinit --no-userinit --load /tmp/ql.lisp \
    ;;        --eval '(quicklisp-quickstart:install :path "~/.quicklisp")' \
    ;;        --eval '(ql:add-to-init-file)' \
    ;;        --quit
    (setq inferior-lisp-program "sbcl"))
#+END_SRC

*** SASS
#+BEGIN_SRC emacs-lisp
  (use-package sass-mode
    :defer t
    :ensure t)
#+END_SRC

*** SCSS
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :defer t
    :ensure t)
#+END_SRC

*** Treesit-Auto
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :ensure t
    :defer t
    :custom
    (treesit-auto-install t)
    :hook
    (after-init . global-treesit-auto-mode)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all))
#+END_SRC

*** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t
    :ensure t)
#+END_SRC

*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :defer t
    :ensure t
    :mode
    ("\\.yaml\\'" "\\.yml\\'")
    :custom-face
    (font-lock-variable-name-face ((t (:foreground "#cba6f7")))))
#+END_SRC

** Themes & Colors
*** Catppuccin
#+BEGIN_SRC emacs-lisp
   (use-package catppuccin-theme
     :if (eq lemacs-default-theme 'catppuccin)
     :defer t
     :ensure t
     :config
     ;; NOTE reloading catppuccin "undoes" what early init does to screen NOT to flash on GUI boot
     (defun lemacs/catppuccin-hack (_)
       "A catppuccin hack to make sure everything is loaded"
       (catppuccin-reload))
     (add-hook 'after-init-hook (lambda ()
                                  (run-with-timer 0.3 nil
                                                  (lambda ()(lemacs/catppuccin-hack nil)))))
     (add-hook 'after-make-frame-functions 'lemacs/catppuccin-hack)

     ;; Custom diff-hl colors
     (custom-set-faces
      `(diff-hl-change ((t (:background unspecified :foreground ,(catppuccin-get-color 'blue))))))
     (custom-set-faces
      `(diff-hl-delete ((t (:background unspecified :foreground ,(catppuccin-get-color 'red))))))
     (custom-set-faces
      `(diff-hl-insert ((t (:background unspecified :foreground ,(catppuccin-get-color 'green))))))

      (custom-set-faces
       `(tab-bar-tab
          ((t
            (:background unspecified
            :box (:line-width 2 :color "#676E95" :style released-button))))))

     ;; Custom vhl/default-face
     (custom-set-faces `(vhl/default-face ((t (:background ,(catppuccin-get-color 'surface2)))))))
#+END_SRC

*** Modus
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :if (eq lemacs-default-theme 'modus)
    :defer t
    :custom
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-mixed-fonts nil)
    (modus-themes-prompts '(bold intense))
    (modus-themes-common-palette-overrides
     `((bg-main "#292D3E")
       (bg-active bg-main)
       (fg-main "#EEFFFF")
       (fg-active fg-main)
       (fg-mode-line-active "#A6Accd")
       (bg-mode-line-active "#232635")
       (fg-mode-line-inactive "#676E95")
       (bg-mode-line-inactive "#282c3d")
       (border-mode-line-active "#676E95")
       (border-mode-line-inactive bg-dim)
       (bg-tab-bar      "#242837")
       (bg-tab-current  bg-main)
       (bg-tab-other    "#242837")
       (fg-prompt "#c792ea")
       (bg-prompt unspecified)
       (bg-hover-secondary "#676E95")
       (bg-completion "#2f447f")
       (fg-completion white)
       (bg-region "#3C435E")
       (fg-region white)

       (fg-line-number-active fg-main)
       (fg-line-number-inactive "gray50")
       (bg-line-number-active unspecified)
       (bg-line-number-inactive "#292D3E")
       (fringe "#292D3E")

       (fg-heading-0 "#82aaff")
       (fg-heading-1 "#82aaff")
       (fg-heading-2 "#c792ea")
       (fg-heading-3 "#bb80b3")
       (fg-heading-4 "#a1bfff")

       (fg-prose-verbatim "#c3e88d")
       (bg-prose-block-contents "#232635")
       (fg-prose-block-delimiter "#676E95")
       (bg-prose-block-delimiter bg-prose-block-contents)

       (accent-1 "#79a8ff")

       (keyword "#89DDFF")
       (builtin "#82aaff")
       (comment "#676E95")
       (string "#c3e88d")
       (fnname "#82aaff")
       (type "#c792ea")
       (variable "#ffcb6b")
       (docstring "#8d92af")
       (constant "#f78c6c")))
    :config
    (modus-themes-with-colors
      (custom-set-faces
       `(diff-hl-change ((,c :foreground ,blue :background unspecified)))
       `(diff-hl-delete ((,c :foreground ,red :background unspecified)))
       `(diff-hl-insert ((,c :foreground ,green :background unspecified)))
       `(tab-bar-tab
         ((,c
           :background ,bg-main
           :box (:line-width 2 :color "#676E95" :style released-button))))))
    :init
    (load-theme 'modus-vivendi-tinted t))

#+END_SRC

*** Rainbow-Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode))

#+END_SRC

*** Colorful
#+BEGIN_SRC emacs-lisp
  (use-package colorful-mode
    :defer t
    :ensure t
    :custom
    (colorful-use-prefix t)
    (colorful-prefix-alignment 'left)
    (colorful-prefix-string "●"))

#+END_SRC

** Tools - Auth
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t
    :demand t
    :config
    (pinentry-start))

#+END_SRC

** Tools - AI Assistency
*** Codeium
#+BEGIN_SRC emacs-lisp
  (use-package codeium
    :if (not (eq lemacs-codeium-scope 'nil))
    :load-path "site-lisp/codeium/"
    :config
    ;; First time loading this package, you need to set up your API key:
    ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
    ;;
    ;; You can do this from within Emacs by running: M-x codeium-install
    (when lemacs-codeium-scope
      (pcase lemacs-codeium-scope
        ('everywhere (add-to-list 'completion-at-point-functions #'codeium-completion-at-point))
        ('prog-mode  (add-hook 'prog-mode-hook
                               (lambda ()
                                 (require 'cape)
                                 (setq-local completion-at-point-functions
                                             (list (cape-capf-super #'codeium-completion-at-point #'lsp-completion-at-point)))))))
      (codeium-init)))

  #+END_SRC

*** Ellama
#+BEGIN_SRC emacs-lisp
  (use-package ellama
    :defer t
    :ensure t
    :init
    (setopt ellama-language "English")
    (require 'llm-ollama)
    (setopt ellama-provider
            (make-llm-ollama
             :chat-model "codellama" :embedding-model "codellama")))

#+END_SRC

** Tools - Checkers and Linting
*** Flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :defer t
    :ensure t
    :hook
    (prog-mode . flymake-mode)
    :custom
    (flymake-show-diagnostics-at-end-of-line 'short)
    (flymake-indicator-type 'margins)
    (flymake-margin-indicators-string
     `((error "»" compilation-error)
       (warning "»" compilation-warning)
       (note "»" compilation-info)))
    :config
    (defun lemacs/toggle-flymake-inline-diagnostics ()
      "Toggle `flymake-show-diagnostics-at-end-of-line` between 'short and nil, and refresh Flymake."
      (interactive)
      (setq flymake-show-diagnostics-at-end-of-line
            (if (eq flymake-show-diagnostics-at-end-of-line 'short)
                nil
              'short))
      ;; Refresh Flymake to apply the new setting
      (flymake-mode-off)
      (flymake-mode)
      (message "flymake-show-diagnostics-at-end-of-line is now %s"
               flymake-show-diagnostics-at-end-of-line))

    (defun lemacs/toggle-flymake-diagnostics ()
      "Toggle Flymake mode on or off."
      (interactive)
      (if flymake-mode
          (progn
            (flymake-mode-off)
            (message "Flymake mode is now OFF"))
        (flymake-mode)
        (message "Flymake mode is now ON")))

    (bind-keys :map flymake-mode-map
               ;; ("C-c ! l" . flymake-show-buffer-diagnostics)
               ("C-c ! l" . consult-flymake)
               ("C-c ! P" . flymake-show-project-diagnostics)
               ("C-c ! n" . flymake-goto-next-error)
               ("C-c ! p" . flymake-goto-prev-error)
               ("C-c ! i" . lemacs/toggle-flymake-inline-diagnostics)
               ("C-c ! d" . lemacs/toggle-flymake-diagnostics)
               ("M-7" . flymake-goto-prev-error)
               ("M-8" . flymake-goto-next-error)))

#+END_SRC

*** Package-Lint
#+BEGIN_SRC emacs-lisp
  (use-package package-lint
    :ensure t
    :defer t)
#+END_SRC

** Tools - Completions - In Buffer
*** Cape
#+BEGIN_SRC emacs-lisp
  (use-package cape
    :ensure t
    :config
    (defun lemacs/eglot-capf ()
      (setq-local completion-at-point-functions
                  (list (cape-capf-super
                         #'eglot-completion-at-point
                         #'tempel-expand
                         #'cape-file))))
    (add-hook 'eglot-managed-mode-hook #'lemacs/eglot-capf))
#+END_SRC

*** Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :if (eq lemacs-in-buffer-completion 'corfu)
    :defer t
    :ensure t
    :custom-face
    ;; (corfu-border ((t (:background  "#333"))))
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                    ;; Enable auto completion
    (corfu-auto-delay 0)
    (corfu-auto-prefix 3)
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    (corfu-quit-no-match t)
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)           ;; Use scroll margin
    (corfu-max-width 50)
    (corfu-min-width 50)
    (corfu-popupinfo-delay 0)
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.

    :config
    (when lemacs-nerd-icons
      (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

    (setq corfu--frame-parameters
          '((no-accept-focus . t)
            (no-focus-on-map . t)
            (min-width . t)
            (min-height . t)
            (border-width . 0)
            (outer-border-width . 0)
            (internal-border-width . 1)
            (child-frame-border-width . 2)
            (left-fringe . 0)
            (right-fringe . 0)
            (vertical-scroll-bars)
            (horizontal-scroll-bars)
            (menu-bar-lines . 0)
            (tool-bar-lines . 0)
            (tab-bar-lines . 0)
            (no-other-frame . t)
            (unsplittable . t)
            (undecorated . t)
            (cursor-type)
            (no-special-glyphs . t)
            (desktop-dont-save . t)))


    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode t)

    (when (not window-system)
      (add-to-list 'load-path "~/.emacs.d/site-lisp/corfu-terminal/")
      (require 'corfu-terminal)
      (corfu-terminal-mode)))
#+END_SRC

*** Tempel
#+BEGIN_SRC emacs-lisp
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init
    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )
#+END_SRC

*** Tempel-Collection
#+BEGIN_SRC emacs-lisp
  (use-package tempel-collection
    :defer t
    :ensure t
    :after tempel)
#+END_SRC

** Tools - Completions - Minibuffer
*** Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :defer t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
               ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.

    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+END_SRC

*** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t
    :defer t
    :bind
    (("C-c ." . embark-act)       ;; pick some comfortable binding
     ("C-c ;" . embark-dwim)      ;; good alternative: M-.
     ("C-h B" . embark-bindings)  ;; alternative for `describe-bindings'
     ("C-h K" . embark-export))   ;; export candidates buffer
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))

    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))

    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator))
#+END_SRC

*** Embark-Consult
#+BEGIN_SRC emacs-lisp
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

*** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'left)
    :init
    (marginalia-mode))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :defer t
    :after vertico
    :init
     (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :hook
    (after-init . vertico-mode)
    :custom
    (vertico-count 10)                    ; Number of candidates to display
    (vertico-resize nil)
    (vertico-cycle nil)                   ; Go from last to first candidate and first to last (cycle)?
    :config
    ;; Prefix the current candidate with “» ”. From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
      (lambda (orig cand prefix suffix index _start)
        (setq cand (funcall orig cand prefix suffix index _start))
        (concat
          (if (= vertico--index index)
            (propertize "» " 'face '(:foreground "#80adf0" :weight bold))
            "  ")
          cand))))
#+END_SRC

** Tools - Container Management
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :defer t
    :ensure t
    :bind ("C-c d" . docker)
    :config
    (pcase lemacs-docker-executable
      ('docker
       (setf docker-command "docker"
             docker-compose-command "docker-compose"
             docker-container-tramp-method "docker"))
      ('podman
       (setf docker-command "podman"
             docker-compose-command "podman-compose"
             docker-container-tramp-method "podman"))))
#+END_SRC

** Tools - Enhanced Editing
*** Expand-Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer t
    :ensure t
    :bind
    (("M-1" . my/expand-region-wrapper))
    :config
    ;; This extends expand-region to also expand from treesit nodes
    (add-to-list 'load-path "~/.emacs.d/site-lisp/treesit-er-expansions")
    (when (and (functionp 'treesit-available-p)
               (treesit-available-p))
      (require 'treesit-er-expansions))

    (defun my/expand-region-wrapper ()
      "Wrapper function for expand-region in Tree-sitter mode."
      (interactive)
      (condition-case nil
          (er/treesit-er-parent-node)
        (error
         (er/expand-region 1)))))

#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :defer t
    :hook
    (after-init . evil-mode)
    :init
    (setq evil-want-integration t)      ;; Integrate `evil' with other Emacs features (optional as it's true by default).
    (setq evil-want-keybinding nil)     ;; Disable default keybinding to set custom ones.
    (setq evil-want-C-u-scroll t)       ;; Makes C-u scroll
    (setq evil-want-C-u-delete t)       ;; Makes C-u delete on insert mode
    (setq evil-want-minibuffer t)       ;; Makes mini-buffer evil (so you can edit it, paste, etc.)
    :config
    (evil-set-undo-system 'undo-tree)   ;; Uses the undo-tree package as the default undo system

    ;; Set the leader key to space for easier access to custom commands. (setq evil-want-leader t)
    (setq evil-leader/in-all-states t)  ;; Make the leader key available in all states.
    (setq evil-want-fine-undo t)        ;; Evil uses finer grain undoing steps

    ;; Define the leader key as Space
    (setq evil-want-keybinding nil)
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-set-leader 'visual (kbd "SPC"))

    ;; Makes it easy (not to jump) moving trhought wrapped text
    (evil-define-key 'normal 'global (kbd "j") 'evil-next-visual-line)
    (evil-define-key 'normal 'global (kbd "k") 'evil-previous-visual-line)

    ;; Keybindings for searching and finding files.
    (evil-define-key 'normal 'global (kbd "<leader> s f") 'consult-find)
    (evil-define-key 'normal 'global (kbd "<leader> s g") 'consult-grep)
    (evil-define-key 'normal 'global (kbd "<leader> s G") 'consult-git-grep)
    (evil-define-key 'normal 'global (kbd "<leader> s r") 'consult-ripgrep)
    (evil-define-key 'normal 'global (kbd "<leader> s h") 'consult-info)
    (evil-define-key 'normal 'global (kbd "<leader> /") 'consult-line)

    ;; Flymake navigation
    (evil-define-key 'normal 'global (kbd "<leader> x x") 'consult-flymake);; Gives you something like `trouble.nvim'
    (evil-define-key 'normal 'global (kbd "] d") 'flymake-goto-next-error) ;; Go to next Flymake error
    (evil-define-key 'normal 'global (kbd "[ d") 'flymake-goto-prev-error) ;; Go to previous Flymake error
    (evil-define-key 'normal 'global (kbd "<leader> t i") 'lemacs/toggle-flymake-inline-diagnostics)
    (evil-define-key 'normal 'global (kbd "<leader> t d") 'lemacs/toggle-flymake-diagnostics)

    ;; Dired commands for file management
    (evil-define-key 'normal 'global (kbd "<leader> x d") 'dired)
    (evil-define-key 'normal 'global (kbd "<leader> x j") 'dired-jump)
    (evil-define-key 'normal 'global (kbd "<leader> x f") 'find-file)

    ;; Diff-HL navigation for version control
    (evil-define-key 'normal 'global (kbd "] c") 'diff-hl-next-hunk) ;; Next diff hunk
    (evil-define-key 'normal 'global (kbd "[ c") 'diff-hl-previous-hunk) ;; Previous diff hunk


    ;; Magit keybindings for Git integration
    (evil-define-key 'normal 'global (kbd "<leader> g g") 'magit-status)      ;; Open Magit status
    (evil-define-key 'normal 'global (kbd "<leader> g l") 'magit-log-current) ;; Show current log
    (evil-define-key 'normal 'global (kbd "<leader> g d") 'magit-diff-buffer-file) ;; Show diff for the current file
    (evil-define-key 'normal 'global (kbd "<leader> g D") 'diff-hl-show-hunk) ;; Show diff for a hunk
    (evil-define-key 'normal 'global (kbd "<leader> g b") 'vc-annotate)       ;; Annotate buffer with version control info

    ;; Buffer management keybindings
    (evil-define-key 'normal 'global (kbd "] b") 'switch-to-next-buffer) ;; Switch to next buffer
    (evil-define-key 'normal 'global (kbd "[ b") 'switch-to-prev-buffer) ;; Switch to previous buffer
    (evil-define-key 'normal 'global (kbd "<leader> b i") 'consult-buffer) ;; Open consult buffer list
    (evil-define-key 'normal 'global (kbd "<leader> b b") 'ibuffer) ;; Open Ibuffer
    (evil-define-key 'normal 'global (kbd "<leader> b d") 'kill-current-buffer) ;; Kill current buffer
    (evil-define-key 'normal 'global (kbd "<leader> b k") 'kill-current-buffer) ;; Kill current buffer
    (evil-define-key 'normal 'global (kbd "<leader> b x") 'kill-current-buffer) ;; Kill current buffer
    (evil-define-key 'normal 'global (kbd "<leader> b s") 'save-buffer) ;; Save buffer
    (evil-define-key 'normal 'global (kbd "<leader> b l") 'consult-buffer) ;; Consult buffer

    ;; Treemacs keybindings
    (evil-define-key 'normal 'global (kbd "<leader> e f") 'treemacs)
    (evil-define-key 'normal 'global (kbd "<leader> e e") 'treemacs)
    (evil-define-key 'normal 'global (kbd "<leader> e d") 'dired-jump)

    ;; Eshell/Eat management keybindings
    (evil-define-key 'normal 'global (kbd "<leader> t e") 'lemacs/open-term )
    (evil-define-key 'normal 'global (kbd "<leader> t v") 'lemacs/split-term-vertical)
    (evil-define-key 'normal 'global (kbd "<leader> t \\") 'lemacs/split-term-vertical)
    (evil-define-key 'normal 'global (kbd "<leader> t |") 'lemacs/split-term-vertical)

    (evil-define-key 'normal 'global (kbd "<leader> t h") 'lemacs/split-term-horizontal)
    (evil-define-key 'normal 'global (kbd "<leader> t -") 'lemacs/split-term-horizontal)
    (evil-define-key 'normal 'global (kbd "<leader> t s") 'lemacs/split-term-horizontal)

    (evil-define-key 'normal 'global (kbd "<leader> t k") 'lemacs/kill-all-shell-buffers)
    (evil-define-key 'normal 'global (kbd "<leader> t t") 'lemacs/open-term-new-tab)

    (evil-define-key 'normal 'global (kbd "<leader> t x") 'lemacs/close-term)

    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'consult-history)

    ;; Managing tabs
    ;; ]t and [t are already set
    (evil-define-key 'normal 'global (kbd "<leader> t n") '(lambda ()
                                                            (interactive)
                                                            (tab-new)
                                                            (scratch-buffer)))
    (evil-define-key 'normal 'global (kbd "<leader> t c") 'tab-close)
    (evil-define-key 'normal 'global (kbd "<leader> t l") 'lemacs/switch-tab-or-tab-bar)

    ;; Project management keybindings
    (evil-define-key 'normal 'global (kbd "<leader> p b") 'consult-project-buffer) ;; Consult project buffer
    (evil-define-key 'normal 'global (kbd "<leader> p p") 'lemacs/find-projects-and-switch ) ;; Find projects
    (evil-define-key 'normal 'global (kbd "<leader> p f") 'project-find-file) ;; Find file in project
    (evil-define-key 'normal 'global (kbd "<leader> p g") 'project-find-regexp) ;; Find regexp in project
    (evil-define-key 'normal 'global (kbd "<leader> p k") 'project-kill-buffers) ;; Kill project buffers
    (evil-define-key 'normal 'global (kbd "<leader> p D") 'project-dired) ;; Dired for project

    ;; Perspective keybindings
    (evil-define-key 'normal 'global (kbd "<leader> p a") 'persp-add-buffer)

    (evil-define-key 'normal 'global (kbd "<leader> p s") 'persp-switch)
    (defun lemacs/consult-or-persp-buffer ()
      "Use `persp-switch-to-buffer` if `persp-mode` is active, otherwise `consult-buffer`."
      (interactive)
      (if (bound-and-true-p persp-mode)
          (call-interactively #'persp-switch-to-buffer)
        (consult-buffer)))
    (evil-define-key 'normal 'global (kbd "<leader>SPC") 'lemacs/consult-or-persp-buffer )

    ;; Yank from kill ring
    (evil-define-key 'normal 'global (kbd "P") 'consult-yank-from-kill-ring)
    (evil-define-key 'normal 'global (kbd "<leader> P") 'consult-yank-from-kill-ring)

    ;; Undo tree visualization
    (evil-define-key 'normal 'global (kbd "<leader> u") 'undo-tree-visualize)

    ;; Help keybindings
    (evil-define-key 'normal 'global (kbd "<leader> h m") 'describe-mode) ;; Describe current mode
    (evil-define-key 'normal 'global (kbd "<leader> h f") 'describe-function) ;; Describe function
    (evil-define-key 'normal 'global (kbd "<leader> h v") 'describe-variable) ;; Describe variable
    (evil-define-key 'normal 'global (kbd "<leader> h k") 'describe-key) ;; Describe key
    (evil-define-key 'normal 'global (kbd "<leader> h e") 'view-echo-area-messages) ;; Echo area *Messages*

    ;; Tab navigation
    (evil-define-key 'normal 'global (kbd "] t") 'tab-next) ;; Go to next tab
    (evil-define-key 'normal 'global (kbd "[ t") 'tab-previous) ;; Go to previous tab


    ;; Custom example. Formatting with prettier/biome tool
    (defun lemacs/format-current-file ()
      "Format the current file using biome if biome.json is present; otherwise, use prettier.
  Also first tries the local node_modules/.bin and later the global bin."
      (interactive)
      (let* ((file (buffer-file-name))
             (project-root (locate-dominating-file file "node_modules"))
             (biome-config (and project-root (file-exists-p (expand-file-name "biome.json" project-root))))
             (local-biome (and project-root (expand-file-name "node_modules/.bin/biome" project-root)))
             (global-biome (executable-find "biome"))
             (local-prettier (and project-root (expand-file-name "node_modules/.bin/prettier" project-root)))
             (global-prettier (executable-find "prettier"))
             (formatter nil)
             (source nil)
             (command nil)
             (start-time (float-time))) ;; Capture the start time
        (cond
         ;; Use Biome if biome.json exists
         ((and biome-config local-biome (file-executable-p local-biome))
          (setq formatter local-biome)
          (setq source "biome (local)")
          (setq command (format "%s format --write %s" formatter (shell-quote-argument file))))
         ((and biome-config global-biome)
          (setq formatter global-biome)
          (setq source "biome (global)")
          (setq command (format "%s format --write %s" formatter (shell-quote-argument file))))

         ;; Fall back to Prettier if no biome.json
         ((and local-prettier (file-executable-p local-prettier))
          (setq formatter local-prettier)
          (setq source "prettier (local)")
          (setq command (format "%s --write %s" formatter (shell-quote-argument file))))
         ((and global-prettier)
          (setq formatter global-prettier)
          (setq source "prettier (global)")
          (setq command (format "%s --write %s" formatter (shell-quote-argument file)))))
        (if command
            (progn
              (save-buffer)
              (shell-command command)
              (revert-buffer t t t)
              (let ((elapsed-time (* 1000 (- (float-time) start-time)))) ;; Calculate elapsed time in ms
                (message "Formatted with %s - %.2f ms" source elapsed-time)))
          (message "No formatter found (biome or prettier)"))))

    (evil-define-key 'normal 'global (kbd "<leader> m p")
      (lambda ()
        (interactive)
        (lemacs/format-current-file)
        (revert-buffer t t t)))

    ;; LSP commands keybindings
    (evil-define-key 'normal lsp-mode-map
      ;; (kbd "gd") 'lsp-find-definition                ;; evil-collection already provides gd
      (kbd "gr") 'lsp-find-references                   ;; Finds LSP references
      (kbd "<leader> c a") 'lsp-execute-code-action     ;; Execute code actions
      (kbd "<leader> r n") 'lsp-rename                  ;; Rename symbol
      (kbd "gI") 'lsp-find-implementation               ;; Find implementation
      (kbd "<leader> l f") 'lsp-format-buffer)          ;; Format buffer via lsp


    (defun lemacs/lsp-describe-and-jump ()
      "Show hover documentation and jump to *lsp-help* buffer."
      (interactive)
      (lsp-describe-thing-at-point)
      (let ((help-buffer "*lsp-help*"))
        (when (get-buffer help-buffer)
          (switch-to-buffer-other-window help-buffer))))
    ;; Open hover documentation
    (evil-define-key 'normal 'global (kbd "K") 'lemacs/lsp-describe-and-jump)
    ;; Yeah, on terminals, Emacs doesn't support (YET), the use of floating windows,
    ;; thus, this will open a small buffer bellow your window.
    ;; This floating frames are called "child frames" and some recent effort is being put
    ;; into having a translation of those marvelous GUI stuff to terminal. Let's hope
    ;; we add this to Emacs Kick soom :)

    ;; Commenting functionality for single and multiple lines
    (evil-define-key 'normal 'global (kbd "gcc")
      (lambda ()
        (interactive)
        (if (not (use-region-p))
            (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

    (evil-define-key 'visual 'global (kbd "gc")
      (lambda ()
        (interactive)
        (if (use-region-p)
            (comment-or-uncomment-region (region-beginning) (region-end)))))


    (defun lemacs-open-eldoc ()
      "Toggle the Eldoc documentation buffer. Enable Eldoc if not already enabled."
      (interactive)
      ;; Ensure eldoc-mode is active
      (unless (bound-and-true-p eldoc-mode)
        (eldoc-mode 1))
      ;; Open or toggle the eldoc documentation buffer
      (let ((eldoc-buf (eldoc-doc-buffer)))
        (if (get-buffer-window eldoc-buf)
            (quit-window nil (get-buffer-window eldoc-buf))  ;; Close if visible
          (display-buffer eldoc-buf))))                      ;; Open if not visible

    (if (display-graphic-p)
        (evil-define-key 'normal 'global (kbd "K") #'eldoc-box-help-at-point)
      (evil-define-key 'normal 'global (kbd "K") #'lemacs-open-eldoc)
      (global-set-key (kbd "C-h C-.") #'eldoc-box-help-at-point))


    ;; On minibuffer, makes C-p C-n work with selections on vertico
    (eval-after-load "evil-maps"
      (dolist (map '(evil-motion-state-map
                     evil-insert-state-map
                     evil-emacs-state-map))
        (define-key (eval map) "\C-n" nil)
        (define-key (eval map) "\C-p" nil)))

    (evil-mode 1))

#+END_SRC
*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :defer t
    :ensure t
    :custom
    (evil-collection-want-find-usages-bindings t)
    :hook
    (evil-mode . evil-collection-init))

#+END_SRC
*** Evil Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :after evil-collection
    :config
    (global-evil-surround-mode 1))

#+END_SRC
*** Evil Matchit
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :after evil-collection
    :config
    (global-evil-matchit-mode 1))

#+END_SRC
*** Pulsar
#+BEGIN_SRC emacs-lisp
  (use-package pulsar
    :defer t
    :ensure t
    :hook
    (after-init . pulsar-global-mode)
    :config
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.025)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'evil-ex-lazy-highlight)

    (add-to-list 'pulsar-pulse-functions 'evil-scroll-down)
    (add-to-list 'pulsar-pulse-functions 'flymake-goto-next-error)
    (add-to-list 'pulsar-pulse-functions 'flymake-goto-prev-error)
    (add-to-list 'pulsar-pulse-functions 'evil-yank)
    (add-to-list 'pulsar-pulse-functions 'evil-yank-line)
    (add-to-list 'pulsar-pulse-functions 'evil-delete)
    (add-to-list 'pulsar-pulse-functions 'evil-delete-line)
    (add-to-list 'pulsar-pulse-functions 'evil-jump-item)
    (add-to-list 'pulsar-pulse-functions 'diff-hl-next-hunk)
    (add-to-list 'pulsar-pulse-functions 'diff-hl-previous-hunk))

#+END_SRC

*** SmartParens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :defer t
    :ensure t
    :hook
    (prog-mode . smartparens-mode))
#+END_SRC

*** Undo-Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :ensure t
    :hook
    (after-init . global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/.cache/undo"))))
#+END_SRC

*** WGrep
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    ;; :defer t
    :ensure t
    :custom
    ;; (wgrep-enable-key "e")
    (wgrep-auto-save-buffer t)
    (wgrep-change-readonly-file t))
#+END_SRC

** Tools - File Management
*** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :defer t
    :ensure t
    :hook
    ((dired-mode . dired-async-mode)
     (after-init . async-bytecomp-package-mode)))
#+END_SRC

*** DiredFl
#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :defer t
    :ensure t
    :hook
    (dired-mode . diredfl-global-mode))
#+END_SRC

*** DiredSubtree
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :ensure t
    :bind
    (("M-i" . treemacs))
    :config
    (setq treemacs-show-hidden-files t)
    ;; (setq treemacs-resize-icons 44)
    (setq treemacs-no-png-images nil)
    (setq treemacs-width 40)
    (setq treemacs-filewatch-mode t)
    (setq treemacs-icons nil)
    (unless lemacs-nerd-icons
      (setq treemacs-no-png-images 't))
    (setq treemacs-file-event-delay 100)
    (setq treemacs-silent-refresh t)
    (setq treemacs--project-follow-delay 0.05)
    (treemacs-project-follow-mode +1))

#+END_SRC

*** Treemacs-Evil
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)
#+END_SRC

** Tools - GIT Version Control
*** Diff-HL
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :defer t
    :ensure t
    :hook
    (find-file . (lambda ()
                   (global-diff-hl-mode)           ;; Enable Diff-HL mode for all files.
                   (diff-hl-flydiff-mode)          ;; Automatically refresh diffs.
                   (diff-hl-margin-mode)))         ;; Show diff indicators in the margin.
    :custom
    (diff-hl-side 'left)                           ;; Set the side for diff indicators.
    (diff-hl-margin-symbols-alist '((insert . "│") ;; Customize symbols for each change type.
                                     (delete . "-")
                                     (change . "│")
                                     (unknown . "?")
                                     (ignored . "i")))
    :config
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC

*** Git-Timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :defer t
    :ensure t
    :bind ("M-g t" . git-timemachine-toggle))

#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :ensure t
    :preface (defun lemacs/magit-kill-buffers ()
               "Restore window configuration and kill all Magit buffers."
               (interactive)
               (let ((buffers (magit-mode-get-buffers)))
                 (magit-restore-window-configuration)
                 (mapc #'kill-buffer buffers)))
    :bind (:map magit-status-mode-map
                ("q" . #'lemacs/magit-kill-buffers)
                ("C-x k" . #'lemacs/magit-kill-buffers))
    :config
    (setq ediff-custom-diff-options "-u")
    (setq ediff-diff-options "")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq magit-diff-refine-hunk 'all)
    (setq magit-diff-use-overlays nil)
    (setq magit-ediff-dwim-show-on-hunks t)
    (setq magit-executable "/usr/local/bin/git")

    (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
    ;; (setq magit-display-buffer-function 'magit-display-buffer-fullcolumn-most-v1)
    ;; (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)

    (with-eval-after-load 'evil-collection
      (evil-define-key 'normal magit-status-mode-map
        "q" #'lemacs/magit-kill-buffers)))

#+END_SRC

*** Magit-Forge
#+BEGIN_SRC emacs-lisp
  (use-package magit-forge
    :if nil
    :defert t
    :after magit-status
    :ensure t)

#+END_SRC

*** Magit-Stats
#+BEGIN_SRC emacs-lisp
  (use-package magit-stats
    :defer t
    :ensure t)
#+END_SRC

*** Treemacs-Magit
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :defer t
    :ensure t
    :after (:all treemacs))
#+END_SRC

*** VC-Msg
#+BEGIN_SRC emacs-lisp
  (use-package vc-msg
    :defer t
    :ensure t
    :bind
    (("M-2" . 'vc-msg-show))
    :config
    (setq-default pos-tip-background-color "#2A2A39")
    (setq-default pos-tip-foreground-color "#FFFFEF")
    (setq vc-msg-show-at-line-beginning-p nil))

#+END_SRC

** Tools - IRC Enhancements
*** ERC-HL-NICKS
#+BEGIN_SRC emacs-lisp
  (use-package erc-hl-nicks
    :defer t
    :ensure t
    :config
    :after (:all erc))

#+END_SRC

** Tools - LSP Clients
**NOTE**:

To use LSP (and also node/typescript/eslint, prettier), you can install Node JS globally or use a version
management tool, in the case you have several projects with several node versions it is common to use **nvm**
or **asdf**. I recommend to install Node JS via **asdf** (https://asdf-vm.com/).

Note: asdf must be loaded on *.bash_profile* for macos, and *.bashrc* for Linux,
for testing (after Lemacs install), run eshell and look at **asdf --version** output.

You need to Install globally (and for every every asdf plugin shim if you're using asdf):
#+BEGIN_SRC bash
npm i -g vscode-langservers-extracted prettier
npm i -g typescript-language-server typescript
npm i -g eslint
#+END_SRC

*** EGLOT Family
**** Breadcrumb
#+BEGIN_SRC emacs-lisp
  (use-package breadcrumb
    :defer t
    :ensure t
    :hook
    (eglot-connect . breadcrumb-mode))
#+END_SRC

**** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :if (eq lemacs-lsp-client 'eglot)
    :ensure t
    :defer t
    :hook
    (python-ts-mode . eglot-ensure)
    (js-ts-mode . eglot-ensure)
    (typescript-ts-mode . eglot-ensure)
    (typescriptreact-mode . eglot-ensure)
    (tsx-ts-mode . eglot-ensure)
    (rust-ts-mode . eglot-ensure)
    (css-mode . eglot-ensure)
    (sass-mode . eglot-ensure)
    (web-mode . eglot-ensure)
    (prisma-mode . eglot-ensure)
    :custom
    (eglot-autoshutdown t)
    (eglot-events-buffer-size 0)
    (eglot-sync-connect nil)
    (eglot-connect-timeout nil)
    :config
    (when (eq lemacs-lsp-client 'eglot)

      (fset #'jsonrpc--log-event #'ignore)

      (progn
          (bind-keys :map eglot-mode-map
                  ("C-c l a" . eglot-code-actions)
                  ("C-c l o" . eglot-code-action-organize-imports)
                  ("C-c l r" . eglot-rename)
                  ("C-c l f" . eglot-format))))

    (cl-delete-duplicates (nconc eglot-server-programs
                            '((((js-mode :language-id "javascript")
                                 (js-ts-mode :language-id "javascript")
                                 (tsx-ts-mode :language-id "typescriptreact")
                                 (typescript-ts-mode :language-id "typescript")
                                 (typescript-mode :language-id "typescript"))
                                .
                                ("typescript-language-server" "--stdio"
                                  :initializationOptions
                                  (:preferences
                                    (:includeInlayEnumMemberValueHints t
                                      :includeInlayFunctionLikeReturnTypeHints t
                                      :includeInlayFunctionParameterTypeHints t
                                      :includeInlayParameterNameHints "all"
                                      :includeInlayParameterNameHintsWhenArgumentMatchesName t
                                      :includeInlayPropertyDeclarationTypeHints t
                                      :includeInlayVariableTypeHints t
                                      :includeInlayVariableTypeHintsWhenTypeMatchesName t
                                      :completeFunctionCalls t))))))
      :test #'(lambda (element _)
                (if (listp (car element))
                  (if (listp (caar element))
                    (memq 'js-mode (caar element))
                    (memq 'js-mode (car element)))
                  (eq 'js-mode element))))

    (setq-default eglot-workspace-configuration
                  '(:completions
         (:completeFunctionCalls t))))

#+END_SRC
**** Flymake-ESLint
#+BEGIN_SRC emacs-lisp
  (use-package flymake-eslint
    :ensure t
    :config
    ;; If Emacs is compiled with JSON support
    (setq flymake-eslint-prefer-json-diagnostics t)

    (defun lemacs/use-local-eslint ()
      "Set project's `node_modules' binary eslint as first priority.
  If nothing is found, keep the default value flymake-eslint set or
  your override of `flymake-eslint-executable-name.'"
      (interactive)
      (let* ((root (locate-dominating-file (buffer-file-name) "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/.bin/eslint"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flymake-eslint-executable-name eslint)
          (message (format "Found local ESLINT! Setting: %s" eslint))
          (flymake-eslint-enable))))


    (defun lemacs/configure-eslint-with-flymake ()
      (when (or (eq major-mode 'tsx-ts-mode)
                (eq major-mode 'typescript-ts-mode)
                (eq major-mode 'typescriptreact-mode))
        (lemacs/use-local-eslint)))


    ;; eglot can't yet deal with 2 or more lsps per buffer... sad
    (add-hook 'eglot-managed-mode-hook #'lemacs/use-local-eslint)

    ;; We trust lsp-mode to do the right thing
    ;; (add-hook 'lsp-mode-hook #'lemacs/use-local-eslint)

    ;; With older projects without LSP or if eglot fails
    ;; you can call interactivelly M-x lemacs/use-local-eslint RET
    ;; or add a hook like:
    ;; (add-hook 'js-ts-mode-hook #'lemacs/use-local-eslint)
    )
#+END_SRC

*** LSP-MODE Family
**** LSP
#+BEGIN_SRC emacs-lisp
  ;; This is ugly but the only way I managed to make it work, manual hooks didn't do the trick :/
  (when (eq lemacs-lsp-client 'lsp-mode)
    (use-package lsp-mode
      :if (eq lemacs-lsp-client 'lsp-mode)
      :defer t
      :hook ((lsp-mode . lsp-diagnostics-mode)
             (lsp-mode . lsp-enable-which-key-integration)
             ((tsx-ts-mode
               typescript-ts-mode
               css-mode
               rust-ts-mode
               python-ts
               web-mode
               prisma-mode
               typescript-mode
               js-ts-mode) . lsp-deferred))
      :ensure t
      :custom
      (lsp-keymap-prefix "C-c l")
      ;; (lsp-inlay-hint-enable t)
      (lsp-completion-provider :none)
      (lsp-session-file (locate-user-emacs-file ".lsp-session"))
      (lsp-log-io nil)   ;; for speed
      (lsp-idle-delay 0) ;; debouncing, if needed 0.5
      (lsp-keep-workspace-alive nil)
      ;; core
      (lsp-enable-xref t)
      (lsp-auto-configure t)
      (lsp-enable-links nil)
      (lsp-eldoc-enable-hover t)
      (lsp-enable-dap-auto-configure t)
      (lsp-enable-file-watchers nil)
      (lsp-enable-folding nil)
      (lsp-enable-imenu t)
      (lsp-enable-indentation nil)
      (lsp-enable-on-type-formatting nil)
      (lsp-enable-suggest-server-download t)
      (lsp-enable-symbol-highlighting t)
      (lsp-enable-text-document-color nil)
      ;; modeline
      (lsp-modeline-code-actions-enable nil)     ; Modeline should be relatively clean
      (lsp-modeline-diagnostics-enable nil)      ; Already supported through `flycheck'/ `flymake'
      (lsp-modeline-workspace-status-enable nil) ; Modeline displays "LSP" when lsp-mode is enabled
      (lsp-signature-doc-lines 1)                ; Don't raise the echo area. It's distracting
      (lsp-eldoc-render-all t)
      ;; completion
      (lsp-completion-enable t)
      (lsp-completion-enable-additional-text-edit t) ; Ex: auto-insert an import for a completion candidate
      (lsp-enable-snippet nil)                       ; Important to provide full JSX completion
      (lsp-completion-show-kind t)                   ; Optional
      ;; lens
      (lsp-lens-enable t)
      ;; headerline
      (lsp-headerline-breadcrumb-enable-symbol-numbers t)
      (lsp-headerline-arrow "▶")
      (lsp-headerline-breadcrumb-enable-diagnostics nil)
      (lsp-headerline-breadcrumb-icons-enable nil)
      ;; semantic
      (lsp-semantic-tokens-enable nil)

      :init
      (setq lsp-use-plists t)
      ;; (lsp-inlay-hints-mode)
      ))
#+END_SRC

**** LSP-Prisma
#+BEGIN_SRC emacs-lisp
  (use-package lsp-prisma
    :defer t
    :after (:any prisma-mode)
    :load-path "site-lisp/prisma-mode/")

#+END_SRC

**** LSP-Tailwindcss
#+BEGIN_SRC emacs-lisp
  (use-package lsp-tailwindcss
    :ensure t
    :defer t
    :config
    (add-to-list 'lsp-language-id-configuration '(".*\\.erb$" . "html"))
    :init
    (setq lsp-tailwindcss-add-on-mode t))

#+END_SRC

** Tools - Session and Window Management
*** Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :defer t
    :bind
    ("M-O" . ace-window)
    ("M-o" . ace-window))

#+END_SRC

*** IBuffer-Project
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-project
    :ensure t
    ;; :defer t
    :config
    (add-hook
     'ibuffer-hook
     (lambda ()
       (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
       (unless (eq ibuffer-sorting-mode 'project-file-relative)
         (ibuffer-do-sort-by-project-file-relative)))))
#+END_SRC

*** Transpose
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :defer t
    :ensure t
    :bind
    (("C-x 4 t" . transpose-frame)
     ("C-x 4 r" . rotate-frame-clockwise)))
#+END_SRC

*** Persp
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :defer t
    :ensure t
    :custom
    (persp-auto-save-opt 0)     ;; I don't want perspectives saved
    (persp-auto-resume-time 0)
    (persp-lighter              ;; How persp is shown in modeline
     '(:eval
       (format
        (propertize " #%.12s" 'face
                    (let ((persp (get-current-persp)))
                      (if persp
                          (if
                              (persp-contain-buffer-p (current-buffer)
                                                      persp)
                              'font-lock-builtin-face
                            'persp-face-lighter-buffer-not-in-persp)
                        'persp-face-lighter-nil-persp)))
        (safe-persp-name (get-current-persp)))))
    :hook
    (after-init . persp-mode)
    :config
    ;; Makes tab-bar tabs also restorable via persp-mode
    (add-hook 'persp-before-deactivate-functions
              (defun +workspaces-save-tab-bar-data-h (_)
                (when (get-current-persp)
                  (set-persp-parameter
                   'tab-bar-tabs (tab-bar-tabs)))))

    (add-hook 'persp-activated-functions
              (defun +workspaces-load-tab-bar-data-h (_)
                (tab-bar-tabs-set (persp-parameter 'tab-bar-tabs))
                (tab-bar--update-tab-bar-lines t)))

    ;; Makes persp name appear on global-mode-string, hence it
    ;; is also printed on tab-bar, top-right position
    (add-to-list 'tab-bar-format 'tab-bar-format-align-right 'append)
    (add-to-list 'tab-bar-format 'tab-bar-format-global 'append)

    (defun lemacs/persp-tab-bar-format ()
      "Return the current perspective name formatted for the tab-bar."
      (when (bound-and-true-p lemacs/persp-global-string)
        (concat " "
                (propertize (concat " " lemacs/persp-global-string " ")
                            'face '(:foreground "white" :background "#242837"
                                                :weight bold
                                                :box (:line-width 2 :color "#676E95" :style released-button)))
                " ")))

    (add-to-list 'tab-bar-format #'lemacs/persp-tab-bar-format 'append)

    (defun lemacs/update-persp-in-global-mode-string (&rest _)
      "Update `lemacs/persp-global-string` with the current perspective name."
      (when (bound-and-true-p persp-mode)
        (setq lemacs/persp-global-string persp-last-persp-name)
        (tab-bar--update-tab-bar-lines)))

    (defun lemacs/setup-persp-global-mode-string ()
      "Set up integration of `lemacs/persp-global-string` with the tab-bar."
      (add-hook 'persp-activated-functions #'lemacs/update-persp-in-global-mode-string)
      (add-hook 'persp-renamed-functions #'lemacs/update-persp-in-global-mode-string)
      (add-hook 'persp-created-functions #'lemacs/update-persp-in-global-mode-string)
      (add-hook 'persp-before-switch-functions #'lemacs/update-persp-in-global-mode-string))

    (lemacs/setup-persp-global-mode-string))

#+END_SRC

*** Persp-Mode-Project-Bridge
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode-project-bridge
    :defer t
    :ensure t
    :hook
    (persp-mode-project-bridge-mode . (lambda ()
                                        (if persp-mode-project-bridge-mode
                                            (persp-mode-project-bridge-find-perspectives-for-all-buffers)
                                          (persp-mode-project-bridge-kill-perspectives))))
    (persp-mode . persp-mode-project-bridge-mode))
#+END_SRC

** Tools - Media Players
*** EMMS
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :defer t
    :ensure t
    :config
    (require 'emms-setup)
    (emms-all)
    (emms-default-players)
    (setq-default
     emms-source-playlist-default-format 'm3u
     emms-playlist-mode-center-when-go t
     emms-playlist-default-major-mode 'emms-playlist-mode
     emms-show-format "NP: %s"

     emms-player-list '(emms-player-mpv)
     emms-player-mpv-environment '("PULSE_PROP_media.role=music")
     emms-player-mpv-parameters '("--quiet" "--really-quiet" "--no-video" "--no-audio-display" "--force-window=no" "--vo=null"))
    (setq emms-player-mpv-update-metadata t)

    ;; The tinytag python package is a dependency
    ;; Install it with: python3 -m pip install tinytag
    (setq emms-info-functions '(emms-info-tinytag))

    ;; Load cover images
    (setq emms-browser-covers 'emms-browser-cache-thumbnail-async)

    (defun pad-string (str len)
      "Return a string of length LEN starting with STR, truncating or padding as necessary."
      (let* ((str-len (length str))
             (extra-len (- len str-len)))
        (if (>= extra-len 0)
            (concat str (make-string extra-len ? ))
          (concat (substring str 0 (- len 3)) "..."))))

    (defun my-emms-track-description-function (track)
      "Detailed track listing for TRACK."
      (let ((type (emms-track-get track 'type))
            (name (emms-track-get track 'name))
            (artist (emms-track-get track 'info-artist))
            (album (emms-track-get track 'info-album))
            (title (emms-track-get track 'info-title))
            (tracknumber (emms-track-get track 'info-tracknumber))
            (year (emms-track-get-year track))
            (timet (emms-track-get track 'info-playing-time)))
        (cond ((eq type 'file)
               ;; If it has a minimum of metadata
               (if (and artist title)
                   (concat
                    " "
                    (pad-string
                     (if title
                         (if tracknumber
                             (concat "["
                                     (format "%02d" (string-to-number tracknumber))
                                     "] "
                                     title)
                           title)
                       "Unknown Title")
                     33)
                    "  "
                    (pad-string (if timet
                                    (format "%02d:%02d" (/ timet 60) (% timet 60))
                                  "")
                                5)
                    "  "
                    (pad-string (or artist "Unknown Artist") 18)
                    "  "
                    (pad-string (if album
                                    (if year

                                        album)
                                  "Unknown Album")
                                25)
                    "  "
                    (pad-string (or year "")
                                4))
                 name))
              ((eq 'url type)
               (emms-format-url-track-name name))
              ;; E.g. playlists
              (t (concat (symbol-name type) ":" name)))))

    (setq emms-track-description-function 'my-emms-track-description-function))

#+END_SRC

*** Ready Player
#+BEGIN_SRC emacs-lisp
  (use-package ready-player
    :defer t
    :ensure t
    :config
    (ready-player-mode +1))

#+END_SRC

*** Yeetube
#+BEGIN_SRC emacs-lisp
  (use-package yeetube
    :ensure t
    :defer t
    :init (define-prefix-command 'lemacs/yeetube-map)
    :config
    (setf yeetube-mpv-disable-video t) ;; Disable video output
    :bind (("C-c y" . 'lemacs/yeetube-map)
            :map lemacs/yeetube-map
            ("s" . 'yeetube-search)
            ("b" . 'yeetube-play-saved-video)
            ("d" . 'yeetube-download-videos)
            ("p" . 'yeetube-mpv-toggle-pause)
            ("v" . 'yeetube-mpv-toggle-video)
            ("V" . 'yeetube-mpv-toggle-no-video-flag)
            ("k" . 'yeetube-remove-saved-video)))
#+END_SRC

** Tools - Modeline
*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :defer t
    :ensure t
    :hook
    (after-init . (lambda ()
                    (if (eq lemacs-default-modeline 'doom)
                        (doom-modeline-mode))))
    :custom
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-project-detection 'project)
    (doom-modeline-buffer-name t)
    (doom-modeline-vcs-max-length 25)
    (doom-modeline-icon lemacs-nerd-icons)
    (doom-modeline-time nil)
    (doom-modeline-persp-icon nil)
    (doom-modeline-persp-name nil)
    (doom-modeline-bar-width 0.1)
    (mode-line-right-align-edge 'right-fringe))

#+END_SRC

** Tools - Nerd Icons Support
*** Nerd-Icons-Completion
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-completion
    :if lemacs-nerd-icons
    :ensure t
    ;; :defer t
    :after (:all nerd-icons marginalia)
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

#+END_SRC

*** Nerd-Icons-Corfu
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-corfu
    :if lemacs-nerd-icons
      :ensure t
    :defer t
      :after (:all corfu))
#+END_SRC

*** Nerd-Icons-Dired
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-dired
    ;; :defer t
    :if lemacs-nerd-icons
    :ensure t
    :after (:all nerd-icons dired)
    :config
    (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))

#+END_SRC
*** Nerd-Icons-Ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons-ibuffer
    ;; :defer t
    :if lemacs-nerd-icons
    :ensure t
    :after (:any nerd-icons)
    :config
    (add-hook 'ibuffer-mode-hook #'nerd-icons-ibuffer-mode))

#+END_SRC

*** Treemacs-Icons-Dired
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :defer t
    :ensure t)

#+END_SRC

*** Treemacs-Nerd-Icons
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-nerd-icons
    :if lemacs-nerd-icons
    :ensure t
    :config
    (treemacs-load-theme "nerd-icons"))

#+END_SRC

** Tools - Org-Mode enhancements
*** Org-Ros
#+BEGIN_SRC emacs-lisp
  (use-package org-ros
    :defer t
    :ensure t
    :bind
    (("C-S-p" . org-ros)))

#+END_SRC

*** Org-Modern
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :defer t
    :ensure t
    :hook
    (org-mode . org-modern-mode))

#+END_SRC

** Tools - Personal Info Management (PIM)
Here we have stuff to handle your **Agenda** and **Contacts List**.

*** Vdirel
#+BEGIN_SRC emacs-lisp
  (use-package vdirel
    :ensure t
    :defer t)
#+END_SRC

*** Khalel
#+BEGIN_SRC emacs-lisp
  (use-package khalel
    :ensure t
    :after org
    :config
    ;; (setq khalel-khal-command "~/.local/bin/khal")
    (setq org-agenda-files  (list (concat org-directory "/" "calendar.org")))
    (setq khalel-import-org-file (concat org-directory "/" "calendar.org"))
    (setq khalel-vdirsyncer-command "vdirsyncer")
    (setq khalel-capture-key "e")
    (setq khalel-import-org-file-confirm-overwrite nil)
    (setq khalel-import-end-date "+30d")

    (defun lemacs/calendar-sync ()
      (interactive)
      (khalel-run-vdirsyncer)
      (khalel-import-events))

    (khalel-add-capture-template))

#+END_SRC

** Tools - Processes Management
*** Proced-Narrow
#+BEGIN_SRC emacs-lisp
  (use-package proced-narrow
    :ensure t
    :defer t
    :after proced)

#+END_SRC

** Tools - REST Api Client
*** Verb
#+BEGIN_SRC emacs-lisp
  (use-package verb
    :ensure t
    :defer t)

#+END_SRC

** Tools - RSS News Feeds
*** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :ensure t
    :config
    (setq elfeed-use-curl t)
    (define-advice elfeed-search--header (:around (oldfun &rest args))
    (if elfeed-db
        (apply oldfun args)
      "No database loaded yet"))

    ;; NOTE: set your feeds like these
    ;; (setq elfeed-feeds
    ;;       '(
    ;;         "https://planet.emacslife.com/atom.xml"
    ;;         "https://www.rahuljuliato.com/rss.xml"
    ;;         "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ"
    ;;         ))

    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "youtube\\.com"
                                  :add '(video youtube)))

    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :remove 'unread))

  (defun lemacs/elfeed-play-enclosure ()
    "Play elfeed enclosure file (for podcasts)."
    (interactive)
    (require 'mpv)
    (let ((entry elfeed-show-entry))
      (if entry
          (let ((entry elfeed-show-entry)
                (url (car (elt (elfeed-entry-enclosures entry)  0 ))))
            (message (concat ">>> Loading: " url))
            (mpv-play-url url))))))

#+END_SRC

*** Elfeed Tube
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube
    :ensure t
    :defer t
    :hook
    (elfeed-search-update . elfeed-tube-setup)
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    )

#+END_SRC

*** Elfeed Tube MPV
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube-mpv
    ;; :defer t
    :ensure t
    :after elfeed-tube)

#+END_SRC

** Tools - Sharing
*** 0x0
#+BEGIN_SRC emacs-lisp
  (use-package 0x0
    :ensure t
    :defer t)
#+END_SRC
*** Transmission
#+BEGIN_SRC emacs-lisp
  (use-package transmission
    :defer t
    :ensure t)
#+END_SRC

** Tools - Splash-screen
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :defer t
    :config
    ;; (setq dashboard-startup-banner (".....logo.png" . ".....logo.txt"))
    ;; (setq dashboard-startup-banner 'logo)
    (pcase lemacs-ascii-art
      ('lemacs
       (setq dashboard-startup-banner
             (expand-file-name "assets/lemacs_logo.txt" user-emacs-directory)))
      ('baron
       (setq dashboard-startup-banner
             (expand-file-name "assets/lemacs_baron_logo.txt" user-emacs-directory)))
      ('blood
       (setq dashboard-startup-banner
             (expand-file-name "assets/lemacs_blood_logo.txt" user-emacs-directory)))
      ('blur
       (setq dashboard-startup-banner
             (expand-file-name "assets/lemacs_blur_logo.txt" user-emacs-directory)))
      ('nil
       (setq dashboard-startup-banner
             (cons (expand-file-name "assets/lemacs_logo.png" user-emacs-directory)
                   (expand-file-name "assets/lemacs_logo.txt" user-emacs-directory)))))


    (setq dashboard-center-content t)
    (setq dashboard-vertically-center-content nil)
    (setq dashboard-display-icons-p t)

    (when lemacs-nerd-icons
      (setq dashboard-icon-type 'nerd-icons))


    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-heading-icons nil)

    (setq dashboard-startupify-list '(dashboard-insert-newline
                                      dashboard-insert-banner
                                      dashboard-insert-newline
                                      dashboard-insert-init-info
                                      dashboard-insert-newline
                                      dashboard-insert-newline
                                      dashboard-insert-navigator
                                      dashboard-insert-newline
                                      dashboard-insert-newline
                                      dashboard-insert-items
                                      ))

    (setq dashboard-items '(
                            ;; (recents   . 5)
                            ;; (bookmarks . 5)
                            ;; (projects  . 5)
                            ;; (agenda    . 5)
                            ;; (registers . 5)
                            ))

    (setq dashboard-navigator-buttons ;; format: icon title help action face prefix suffix`.
          `((
             (,(nerd-icons-faicon "nf-fa-envelope") "gnus" "" (lambda (&rest _) (gnus)))
             (,(nerd-icons-faicon "nf-fa-rss") "elfeed" "" (lambda (&rest _) (elfeed)))
             (,(nerd-icons-faicon "nf-fa-firefox") "eww" "" (lambda (&rest _) (call-interactively 'eww)))
             (,(nerd-icons-faicon "nf-fa-music") "emms" "" (lambda (&rest _) (emms-browser)))
             (,(nerd-icons-faicon "nf-fa-youtube_play") "yeetube" "" (lambda (&rest _) (call-interactively 'yeetube-search)))
             (,(nerd-icons-faicon "nf-fa-hashtag") "erc" "" (lambda (&rest _) (call-interactively 'erc-tls)))
             (,(nerd-icons-faicon "nf-fa-cog") "config" "" (lambda (&rest _) (call-interactively (customize-group 'lemacs))))
             )))

    (dashboard-setup-startup-hook))

#+END_SRC

** Tools - System PATH and System helpers
*** Exec-Path-From-Shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :defer t
    :ensure t
    :hook
    (after-init . (lambda ()
                    (when (memq window-system '(mac ns x))
                      (exec-path-from-shell-initialize)))))
#+END_SRC

*** Add node-modules path
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :ensure t
    :defer t
    :custom
    ;; Makes sure you are using the local bin for your
    ;; node project. Local eslint, typescript server...
    (eval-after-load 'typescript-ts-mode
      '(add-hook 'typescript-ts-mode-hook #'add-node-modules-path))
    (eval-after-load 'tsx-ts-mode
      '(add-hook 'tsx-ts-mode-hook #'add-node-modules-path))
    (eval-after-load 'typescriptreact-mode
      '(add-hook 'typescriptreact-mode-hook #'add-node-modules-path))
    (eval-after-load 'js-mode
      '(add-hook 'js-mode-hook #'add-node-modules-path)))
#+END_SRC
*** XClip
#+BEGIN_SRC emacs-lisp
  (use-package xclip
    :defer t
    :ensure t
    :config
    (xclip-mode 1))
#+END_SRC

** Tools - Terminals / Shells

*** EAT
#+BEGIN_SRC emacs-lisp
  (use-package eat
    :defer t
    :ensure t
    :config
    ;; Add to your .bashrc
    ;; [ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
    ;; source "$EAT_SHELL_INTEGRATION_DIR/bash"

    ;; Makes eat quicker
    (setq process-adaptive-read-buffering nil)

    (setq eat-term-name "xterm-256color")

    (setq eat-kill-buffer-on-exit t)

    ;; Runs not compatible eshell term stuff with eat on the same buffer
    (add-hook 'eshell-mode-hook #'eat-eshell-mode)

    ;; Runs listed 'visual-mode' eshell stuff with eat on separated buffer
    ;; (takes precedence over the above setting)
    ;; (add-hook 'eshell-mode-hook #'eat-eshell-visual-command-mode)

    ;; Disabled line/number minor modes on modeline
    (add-hook 'eat-mode-hook (lambda ()
                               (setq-local line-number-mode nil)
                               (setq-local column-number-mode nil))))

#+END_SRC
*** Eshell Z
#+BEGIN_SRC emacs-lisp
  (use-package eshell-z
    :ensure t
    ;; :defer t
    :hook
    (eshell-load . (lambda ()
                     (require 'eshell-z))))
#+END_SRC
*** Eshell-Syntax-Highlighting
#+BEGIN_SRC emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :config
    (eshell-syntax-highlighting-global-mode +1)
    :init
    (defface eshell-syntax-highlighting-invalid-face
      '((t :inherit error))
      "Face used for invalid Eshell commands."
      :group 'eshell-syntax-highlighting))

#+END_SRC

*** Sudo Edit
This package provides *sudo-edit* and *sudo-edit-find-file* so we can
easily edit files as root, either from an open buffer or finding a
file via *C-x f* or inside eshell.

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :defer t)

#+END_SRC

** Tools - Text Visualization Aid
*** Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :defer t
    :ensure t
    :config
    (setq eldoc-echo-area-use-multiline-p nil)
    (setq eldoc-echo-area-display-truncation-message nil)

    (if (display-graphic-p)
        (global-set-key (kbd "C-h C-.") #'eldoc-box-help-at-point)
      (global-set-key (kbd "C-h C-.") #'eldoc-doc-buffer)))
#+END_SRC
*** Eldoc-Box
#+BEGIN_SRC emacs-lisp
  (use-package eldoc-box
    :if (window-system)
    :defer t
    :ensure t
    :after (:all eldoc)
    :custom-face
    ;; (eldoc-box-border ((t (:background "#333"))))
    :config
    (setq eldoc-box-frame-parameters
        '((left . -1)
          (top . -1)
          (width  . 0)
          (height  . 0)
          (no-accept-focus . t)
          (no-focus-on-map . t)
          (min-width  . 0)
          (min-height  . 0)
          (internal-border-width . 2)
          (vertical-scroll-bars . nil)
          (horizontal-scroll-bars . nil)
          (right-fringe . 10)
          (left-fringe . 3)
          (menu-bar-lines . 0)
          (tool-bar-lines . 0)
          (line-spacing . 0)
          (unsplittable . t)
          (undecorated . t)
          (visibility . nil)
          (mouse-wheel-frame . nil)
          (no-other-frame . t)
          (cursor-type . nil)
          (inhibit-double-buffering . t)
          (drag-internal-border . t)
          (no-special-glyphs . t)
          (desktop-dont-save . t)
          (tab-bar-lines . 0)
          (tab-bar-lines-keep-state . 1))))
#+END_SRC

*** GH-MD
#+BEGIN_SRC emacs-lisp
  (use-package gh-md
    :defer t
    :ensure t)
#+END_SRC

*** HL-TODO
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :defer t
    :ensure t
    :hook
    (prog-mode . hl-todo-mode))
#+END_SRC

*** Indent-Guide
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :defer t
    :ensure t
    :hook
    (prog-mode . indent-guide-mode)
    :config
    (setq indent-guide-char "¦"))

#+END_SRC

*** Ligatures
#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :if (eq lemacs-ligatures 'on)
    :defer t
    :ensure t
    :hook (after-init . global-ligature-mode)
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://")))

#+END_SRC

*** Olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :defer t
    :ensure t
    :init
    (defun lemacs/center-visual-fill-on ()
      (interactive)
      (setq olivetti-body-width 126)
      (olivetti-mode 1)
      (visual-line-mode -1))

    (defun lemacs/center-visual-fill-off ()
      (interactive)
      (kill-local-variable 'olivetti-body-width)
      (olivetti-mode 0)
      (visual-line-mode 1))

    (add-hook 'elfeed-show-mode-hook 'lemacs/center-visual-fill-on)
    (add-hook 'elfeed-search-mode-hook 'lemacs/center-visual-fill-on)
    (add-hook 'gnus-group-mode-hook 'lemacs/center-visual-fill-on)
    (add-hook 'gnus-summary-mode-hook 'lemacs/center-visual-fill-on)
    (add-hook 'gnus-article-mode-hook 'lemacs/center-visual-fill-on))

#+END_SRC

** Tools - TUI Enhancements
*** KKP
#+BEGIN_SRC emacs-lisp
  (use-package kkp
    :if (not window-system)
    :ensure t
    :defer t
    :config
    ;; (setq kkp-alt-modifier 'alt) ;; use this if you want to map the Alt keyboard modifier to Alt in Emacs (and not to Meta)
    (global-kkp-mode +1))

#+END_SRC

*** XTerm-Color
#+BEGIN_SRC emacs-lisp
  (use-package xterm-color
    :defer t
    :ensure t)
#+END_SRC

*** Zone-Matrix
#+BEGIN_SRC emacs-lisp
  (use-package zone-matrix
    :vc (:url "https://github.com/emacsmirror/zone-matrix"
              :branch "main")
    :ensure t
    :defer t
    :config
    (setq zmx-unicode-mode nil) ;; t uses japanese chars
    (require 'zone-matrix)
    (setq zone-programs [zone-matrix]))

#+END_SRC


* Provide
#+BEGIN_SRC emacs-lisp
  (provide 'lemacs-init)
#+END_SRC
